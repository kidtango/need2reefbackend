# source: http://localhost:4466/tweef1/dev
# timestamp: Mon Feb 25 2019 23:18:15 GMT-0600 (Central Standard Time)

type AggregateCoral {
  count: Int!
}

type AggregateEquipment {
  count: Int!
}

type AggregateFeed {
  count: Int!
}

type AggregateFeedComment {
  count: Int!
}

type AggregateFeedCommentReply {
  count: Int!
}

type AggregateFeedImage {
  count: Int!
}

type AggregateFollower {
  count: Int!
}

type AggregateFollowing {
  count: Int!
}

type AggregateLikesCoral {
  count: Int!
}

type AggregateLikesFeed {
  count: Int!
}

type AggregateLikesFeedComment {
  count: Int!
}

type AggregateLikesFeedCommentReply {
  count: Int!
}

type AggregateLikesTank {
  count: Int!
}

type AggregateLikesTankPost {
  count: Int!
}

type AggregateLikesTankReply {
  count: Int!
}

type AggregateProfile {
  count: Int!
}

type AggregateProfilePicture {
  count: Int!
}

type AggregateTank {
  count: Int!
}

type AggregateTankImage {
  count: Int!
}

type AggregateTankPost {
  count: Int!
}

type AggregateTankReply {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateWaterParameters {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Coral implements Node {
  id: ID!
  profile: Profile!
  price: Float!
  user: User!
  images: [String!]!
  largeImages: [String!]!
  likes(where: LikesCoralWhereInput, orderBy: LikesCoralOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LikesCoral!]
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type CoralConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CoralEdge]!
  aggregate: AggregateCoral!
}

input CoralCreateimagesInput {
  set: [String!]
}

input CoralCreateInput {
  price: Float!
  images: CoralCreateimagesInput
  largeImages: CoralCreatelargeImagesInput
  profile: ProfileCreateOneWithoutCoralsInput!
  user: UserCreateOneInput!
  likes: LikesCoralCreateManyWithoutCoralInput
}

input CoralCreatelargeImagesInput {
  set: [String!]
}

input CoralCreateManyWithoutProfileInput {
  create: [CoralCreateWithoutProfileInput!]
  connect: [CoralWhereUniqueInput!]
}

input CoralCreateOneWithoutLikesInput {
  create: CoralCreateWithoutLikesInput
  connect: CoralWhereUniqueInput
}

input CoralCreateWithoutLikesInput {
  price: Float!
  images: CoralCreateimagesInput
  largeImages: CoralCreatelargeImagesInput
  profile: ProfileCreateOneWithoutCoralsInput!
  user: UserCreateOneInput!
}

input CoralCreateWithoutProfileInput {
  price: Float!
  images: CoralCreateimagesInput
  largeImages: CoralCreatelargeImagesInput
  user: UserCreateOneInput!
  likes: LikesCoralCreateManyWithoutCoralInput
}

"""An edge in a connection."""
type CoralEdge {
  """The item at the end of the edge."""
  node: Coral!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CoralOrderByInput {
  id_ASC
  id_DESC
  price_ASC
  price_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CoralPreviousValues {
  id: ID!
  price: Float!
  images: [String!]!
  largeImages: [String!]!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type CoralSubscriptionPayload {
  mutation: MutationType!
  node: Coral
  updatedFields: [String!]
  previousValues: CoralPreviousValues
}

input CoralSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CoralSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CoralSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CoralSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CoralWhereInput
}

input CoralUpdateimagesInput {
  set: [String!]
}

input CoralUpdateInput {
  price: Float
  images: CoralUpdateimagesInput
  largeImages: CoralUpdatelargeImagesInput
  profile: ProfileUpdateOneRequiredWithoutCoralsInput
  user: UserUpdateOneRequiredInput
  likes: LikesCoralUpdateManyWithoutCoralInput
}

input CoralUpdatelargeImagesInput {
  set: [String!]
}

input CoralUpdateManyMutationInput {
  price: Float
  images: CoralUpdateimagesInput
  largeImages: CoralUpdatelargeImagesInput
}

input CoralUpdateManyWithoutProfileInput {
  create: [CoralCreateWithoutProfileInput!]
  connect: [CoralWhereUniqueInput!]
  disconnect: [CoralWhereUniqueInput!]
  delete: [CoralWhereUniqueInput!]
  update: [CoralUpdateWithWhereUniqueWithoutProfileInput!]
  upsert: [CoralUpsertWithWhereUniqueWithoutProfileInput!]
}

input CoralUpdateOneRequiredWithoutLikesInput {
  create: CoralCreateWithoutLikesInput
  connect: CoralWhereUniqueInput
  update: CoralUpdateWithoutLikesDataInput
  upsert: CoralUpsertWithoutLikesInput
}

input CoralUpdateWithoutLikesDataInput {
  price: Float
  images: CoralUpdateimagesInput
  largeImages: CoralUpdatelargeImagesInput
  profile: ProfileUpdateOneRequiredWithoutCoralsInput
  user: UserUpdateOneRequiredInput
}

input CoralUpdateWithoutProfileDataInput {
  price: Float
  images: CoralUpdateimagesInput
  largeImages: CoralUpdatelargeImagesInput
  user: UserUpdateOneRequiredInput
  likes: LikesCoralUpdateManyWithoutCoralInput
}

input CoralUpdateWithWhereUniqueWithoutProfileInput {
  where: CoralWhereUniqueInput!
  data: CoralUpdateWithoutProfileDataInput!
}

input CoralUpsertWithoutLikesInput {
  update: CoralUpdateWithoutLikesDataInput!
  create: CoralCreateWithoutLikesInput!
}

input CoralUpsertWithWhereUniqueWithoutProfileInput {
  where: CoralWhereUniqueInput!
  update: CoralUpdateWithoutProfileDataInput!
  create: CoralCreateWithoutProfileInput!
}

input CoralWhereInput {
  """Logical AND on all given filters."""
  AND: [CoralWhereInput!]

  """Logical OR on all given filters."""
  OR: [CoralWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CoralWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  price: Float

  """All values that are not equal to given value."""
  price_not: Float

  """All values that are contained in given list."""
  price_in: [Float!]

  """All values that are not contained in given list."""
  price_not_in: [Float!]

  """All values less than the given value."""
  price_lt: Float

  """All values less than or equal the given value."""
  price_lte: Float

  """All values greater than the given value."""
  price_gt: Float

  """All values greater than or equal the given value."""
  price_gte: Float
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  profile: ProfileWhereInput
  user: UserWhereInput
  likes_every: LikesCoralWhereInput
  likes_some: LikesCoralWhereInput
  likes_none: LikesCoralWhereInput
}

input CoralWhereUniqueInput {
  id: ID
}

scalar DateTime

type Equipment implements Node {
  id: ID!
  tank: Tank!
  tankDimensions: String!
  glassType: String!
  calrx: String!
  salt: String!
  lighting: String!
  skimmer: String!
  algaeScrubber: String!
  powerhead: String!
  liverock: String!
  sand: String!
  heater: String!
  testKits: String!
  addictives: String!
  dosingPumps: String!
  others: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type EquipmentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EquipmentEdge]!
  aggregate: AggregateEquipment!
}

input EquipmentCreateInput {
  tankDimensions: String!
  glassType: String!
  calrx: String!
  salt: String!
  lighting: String!
  skimmer: String!
  algaeScrubber: String!
  powerhead: String!
  liverock: String!
  sand: String!
  heater: String!
  testKits: String!
  addictives: String!
  dosingPumps: String!
  others: String!
  tank: TankCreateOneWithoutEquipementInput!
}

input EquipmentCreateOneWithoutTankInput {
  create: EquipmentCreateWithoutTankInput
  connect: EquipmentWhereUniqueInput
}

input EquipmentCreateWithoutTankInput {
  tankDimensions: String!
  glassType: String!
  calrx: String!
  salt: String!
  lighting: String!
  skimmer: String!
  algaeScrubber: String!
  powerhead: String!
  liverock: String!
  sand: String!
  heater: String!
  testKits: String!
  addictives: String!
  dosingPumps: String!
  others: String!
}

"""An edge in a connection."""
type EquipmentEdge {
  """The item at the end of the edge."""
  node: Equipment!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EquipmentOrderByInput {
  id_ASC
  id_DESC
  tankDimensions_ASC
  tankDimensions_DESC
  glassType_ASC
  glassType_DESC
  calrx_ASC
  calrx_DESC
  salt_ASC
  salt_DESC
  lighting_ASC
  lighting_DESC
  skimmer_ASC
  skimmer_DESC
  algaeScrubber_ASC
  algaeScrubber_DESC
  powerhead_ASC
  powerhead_DESC
  liverock_ASC
  liverock_DESC
  sand_ASC
  sand_DESC
  heater_ASC
  heater_DESC
  testKits_ASC
  testKits_DESC
  addictives_ASC
  addictives_DESC
  dosingPumps_ASC
  dosingPumps_DESC
  others_ASC
  others_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type EquipmentPreviousValues {
  id: ID!
  tankDimensions: String!
  glassType: String!
  calrx: String!
  salt: String!
  lighting: String!
  skimmer: String!
  algaeScrubber: String!
  powerhead: String!
  liverock: String!
  sand: String!
  heater: String!
  testKits: String!
  addictives: String!
  dosingPumps: String!
  others: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type EquipmentSubscriptionPayload {
  mutation: MutationType!
  node: Equipment
  updatedFields: [String!]
  previousValues: EquipmentPreviousValues
}

input EquipmentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EquipmentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EquipmentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EquipmentSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EquipmentWhereInput
}

input EquipmentUpdateInput {
  tankDimensions: String
  glassType: String
  calrx: String
  salt: String
  lighting: String
  skimmer: String
  algaeScrubber: String
  powerhead: String
  liverock: String
  sand: String
  heater: String
  testKits: String
  addictives: String
  dosingPumps: String
  others: String
  tank: TankUpdateOneRequiredWithoutEquipementInput
}

input EquipmentUpdateManyMutationInput {
  tankDimensions: String
  glassType: String
  calrx: String
  salt: String
  lighting: String
  skimmer: String
  algaeScrubber: String
  powerhead: String
  liverock: String
  sand: String
  heater: String
  testKits: String
  addictives: String
  dosingPumps: String
  others: String
}

input EquipmentUpdateOneWithoutTankInput {
  create: EquipmentCreateWithoutTankInput
  connect: EquipmentWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: EquipmentUpdateWithoutTankDataInput
  upsert: EquipmentUpsertWithoutTankInput
}

input EquipmentUpdateWithoutTankDataInput {
  tankDimensions: String
  glassType: String
  calrx: String
  salt: String
  lighting: String
  skimmer: String
  algaeScrubber: String
  powerhead: String
  liverock: String
  sand: String
  heater: String
  testKits: String
  addictives: String
  dosingPumps: String
  others: String
}

input EquipmentUpsertWithoutTankInput {
  update: EquipmentUpdateWithoutTankDataInput!
  create: EquipmentCreateWithoutTankInput!
}

input EquipmentWhereInput {
  """Logical AND on all given filters."""
  AND: [EquipmentWhereInput!]

  """Logical OR on all given filters."""
  OR: [EquipmentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EquipmentWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  tankDimensions: String

  """All values that are not equal to given value."""
  tankDimensions_not: String

  """All values that are contained in given list."""
  tankDimensions_in: [String!]

  """All values that are not contained in given list."""
  tankDimensions_not_in: [String!]

  """All values less than the given value."""
  tankDimensions_lt: String

  """All values less than or equal the given value."""
  tankDimensions_lte: String

  """All values greater than the given value."""
  tankDimensions_gt: String

  """All values greater than or equal the given value."""
  tankDimensions_gte: String

  """All values containing the given string."""
  tankDimensions_contains: String

  """All values not containing the given string."""
  tankDimensions_not_contains: String

  """All values starting with the given string."""
  tankDimensions_starts_with: String

  """All values not starting with the given string."""
  tankDimensions_not_starts_with: String

  """All values ending with the given string."""
  tankDimensions_ends_with: String

  """All values not ending with the given string."""
  tankDimensions_not_ends_with: String
  glassType: String

  """All values that are not equal to given value."""
  glassType_not: String

  """All values that are contained in given list."""
  glassType_in: [String!]

  """All values that are not contained in given list."""
  glassType_not_in: [String!]

  """All values less than the given value."""
  glassType_lt: String

  """All values less than or equal the given value."""
  glassType_lte: String

  """All values greater than the given value."""
  glassType_gt: String

  """All values greater than or equal the given value."""
  glassType_gte: String

  """All values containing the given string."""
  glassType_contains: String

  """All values not containing the given string."""
  glassType_not_contains: String

  """All values starting with the given string."""
  glassType_starts_with: String

  """All values not starting with the given string."""
  glassType_not_starts_with: String

  """All values ending with the given string."""
  glassType_ends_with: String

  """All values not ending with the given string."""
  glassType_not_ends_with: String
  calrx: String

  """All values that are not equal to given value."""
  calrx_not: String

  """All values that are contained in given list."""
  calrx_in: [String!]

  """All values that are not contained in given list."""
  calrx_not_in: [String!]

  """All values less than the given value."""
  calrx_lt: String

  """All values less than or equal the given value."""
  calrx_lte: String

  """All values greater than the given value."""
  calrx_gt: String

  """All values greater than or equal the given value."""
  calrx_gte: String

  """All values containing the given string."""
  calrx_contains: String

  """All values not containing the given string."""
  calrx_not_contains: String

  """All values starting with the given string."""
  calrx_starts_with: String

  """All values not starting with the given string."""
  calrx_not_starts_with: String

  """All values ending with the given string."""
  calrx_ends_with: String

  """All values not ending with the given string."""
  calrx_not_ends_with: String
  salt: String

  """All values that are not equal to given value."""
  salt_not: String

  """All values that are contained in given list."""
  salt_in: [String!]

  """All values that are not contained in given list."""
  salt_not_in: [String!]

  """All values less than the given value."""
  salt_lt: String

  """All values less than or equal the given value."""
  salt_lte: String

  """All values greater than the given value."""
  salt_gt: String

  """All values greater than or equal the given value."""
  salt_gte: String

  """All values containing the given string."""
  salt_contains: String

  """All values not containing the given string."""
  salt_not_contains: String

  """All values starting with the given string."""
  salt_starts_with: String

  """All values not starting with the given string."""
  salt_not_starts_with: String

  """All values ending with the given string."""
  salt_ends_with: String

  """All values not ending with the given string."""
  salt_not_ends_with: String
  lighting: String

  """All values that are not equal to given value."""
  lighting_not: String

  """All values that are contained in given list."""
  lighting_in: [String!]

  """All values that are not contained in given list."""
  lighting_not_in: [String!]

  """All values less than the given value."""
  lighting_lt: String

  """All values less than or equal the given value."""
  lighting_lte: String

  """All values greater than the given value."""
  lighting_gt: String

  """All values greater than or equal the given value."""
  lighting_gte: String

  """All values containing the given string."""
  lighting_contains: String

  """All values not containing the given string."""
  lighting_not_contains: String

  """All values starting with the given string."""
  lighting_starts_with: String

  """All values not starting with the given string."""
  lighting_not_starts_with: String

  """All values ending with the given string."""
  lighting_ends_with: String

  """All values not ending with the given string."""
  lighting_not_ends_with: String
  skimmer: String

  """All values that are not equal to given value."""
  skimmer_not: String

  """All values that are contained in given list."""
  skimmer_in: [String!]

  """All values that are not contained in given list."""
  skimmer_not_in: [String!]

  """All values less than the given value."""
  skimmer_lt: String

  """All values less than or equal the given value."""
  skimmer_lte: String

  """All values greater than the given value."""
  skimmer_gt: String

  """All values greater than or equal the given value."""
  skimmer_gte: String

  """All values containing the given string."""
  skimmer_contains: String

  """All values not containing the given string."""
  skimmer_not_contains: String

  """All values starting with the given string."""
  skimmer_starts_with: String

  """All values not starting with the given string."""
  skimmer_not_starts_with: String

  """All values ending with the given string."""
  skimmer_ends_with: String

  """All values not ending with the given string."""
  skimmer_not_ends_with: String
  algaeScrubber: String

  """All values that are not equal to given value."""
  algaeScrubber_not: String

  """All values that are contained in given list."""
  algaeScrubber_in: [String!]

  """All values that are not contained in given list."""
  algaeScrubber_not_in: [String!]

  """All values less than the given value."""
  algaeScrubber_lt: String

  """All values less than or equal the given value."""
  algaeScrubber_lte: String

  """All values greater than the given value."""
  algaeScrubber_gt: String

  """All values greater than or equal the given value."""
  algaeScrubber_gte: String

  """All values containing the given string."""
  algaeScrubber_contains: String

  """All values not containing the given string."""
  algaeScrubber_not_contains: String

  """All values starting with the given string."""
  algaeScrubber_starts_with: String

  """All values not starting with the given string."""
  algaeScrubber_not_starts_with: String

  """All values ending with the given string."""
  algaeScrubber_ends_with: String

  """All values not ending with the given string."""
  algaeScrubber_not_ends_with: String
  powerhead: String

  """All values that are not equal to given value."""
  powerhead_not: String

  """All values that are contained in given list."""
  powerhead_in: [String!]

  """All values that are not contained in given list."""
  powerhead_not_in: [String!]

  """All values less than the given value."""
  powerhead_lt: String

  """All values less than or equal the given value."""
  powerhead_lte: String

  """All values greater than the given value."""
  powerhead_gt: String

  """All values greater than or equal the given value."""
  powerhead_gte: String

  """All values containing the given string."""
  powerhead_contains: String

  """All values not containing the given string."""
  powerhead_not_contains: String

  """All values starting with the given string."""
  powerhead_starts_with: String

  """All values not starting with the given string."""
  powerhead_not_starts_with: String

  """All values ending with the given string."""
  powerhead_ends_with: String

  """All values not ending with the given string."""
  powerhead_not_ends_with: String
  liverock: String

  """All values that are not equal to given value."""
  liverock_not: String

  """All values that are contained in given list."""
  liverock_in: [String!]

  """All values that are not contained in given list."""
  liverock_not_in: [String!]

  """All values less than the given value."""
  liverock_lt: String

  """All values less than or equal the given value."""
  liverock_lte: String

  """All values greater than the given value."""
  liverock_gt: String

  """All values greater than or equal the given value."""
  liverock_gte: String

  """All values containing the given string."""
  liverock_contains: String

  """All values not containing the given string."""
  liverock_not_contains: String

  """All values starting with the given string."""
  liverock_starts_with: String

  """All values not starting with the given string."""
  liverock_not_starts_with: String

  """All values ending with the given string."""
  liverock_ends_with: String

  """All values not ending with the given string."""
  liverock_not_ends_with: String
  sand: String

  """All values that are not equal to given value."""
  sand_not: String

  """All values that are contained in given list."""
  sand_in: [String!]

  """All values that are not contained in given list."""
  sand_not_in: [String!]

  """All values less than the given value."""
  sand_lt: String

  """All values less than or equal the given value."""
  sand_lte: String

  """All values greater than the given value."""
  sand_gt: String

  """All values greater than or equal the given value."""
  sand_gte: String

  """All values containing the given string."""
  sand_contains: String

  """All values not containing the given string."""
  sand_not_contains: String

  """All values starting with the given string."""
  sand_starts_with: String

  """All values not starting with the given string."""
  sand_not_starts_with: String

  """All values ending with the given string."""
  sand_ends_with: String

  """All values not ending with the given string."""
  sand_not_ends_with: String
  heater: String

  """All values that are not equal to given value."""
  heater_not: String

  """All values that are contained in given list."""
  heater_in: [String!]

  """All values that are not contained in given list."""
  heater_not_in: [String!]

  """All values less than the given value."""
  heater_lt: String

  """All values less than or equal the given value."""
  heater_lte: String

  """All values greater than the given value."""
  heater_gt: String

  """All values greater than or equal the given value."""
  heater_gte: String

  """All values containing the given string."""
  heater_contains: String

  """All values not containing the given string."""
  heater_not_contains: String

  """All values starting with the given string."""
  heater_starts_with: String

  """All values not starting with the given string."""
  heater_not_starts_with: String

  """All values ending with the given string."""
  heater_ends_with: String

  """All values not ending with the given string."""
  heater_not_ends_with: String
  testKits: String

  """All values that are not equal to given value."""
  testKits_not: String

  """All values that are contained in given list."""
  testKits_in: [String!]

  """All values that are not contained in given list."""
  testKits_not_in: [String!]

  """All values less than the given value."""
  testKits_lt: String

  """All values less than or equal the given value."""
  testKits_lte: String

  """All values greater than the given value."""
  testKits_gt: String

  """All values greater than or equal the given value."""
  testKits_gte: String

  """All values containing the given string."""
  testKits_contains: String

  """All values not containing the given string."""
  testKits_not_contains: String

  """All values starting with the given string."""
  testKits_starts_with: String

  """All values not starting with the given string."""
  testKits_not_starts_with: String

  """All values ending with the given string."""
  testKits_ends_with: String

  """All values not ending with the given string."""
  testKits_not_ends_with: String
  addictives: String

  """All values that are not equal to given value."""
  addictives_not: String

  """All values that are contained in given list."""
  addictives_in: [String!]

  """All values that are not contained in given list."""
  addictives_not_in: [String!]

  """All values less than the given value."""
  addictives_lt: String

  """All values less than or equal the given value."""
  addictives_lte: String

  """All values greater than the given value."""
  addictives_gt: String

  """All values greater than or equal the given value."""
  addictives_gte: String

  """All values containing the given string."""
  addictives_contains: String

  """All values not containing the given string."""
  addictives_not_contains: String

  """All values starting with the given string."""
  addictives_starts_with: String

  """All values not starting with the given string."""
  addictives_not_starts_with: String

  """All values ending with the given string."""
  addictives_ends_with: String

  """All values not ending with the given string."""
  addictives_not_ends_with: String
  dosingPumps: String

  """All values that are not equal to given value."""
  dosingPumps_not: String

  """All values that are contained in given list."""
  dosingPumps_in: [String!]

  """All values that are not contained in given list."""
  dosingPumps_not_in: [String!]

  """All values less than the given value."""
  dosingPumps_lt: String

  """All values less than or equal the given value."""
  dosingPumps_lte: String

  """All values greater than the given value."""
  dosingPumps_gt: String

  """All values greater than or equal the given value."""
  dosingPumps_gte: String

  """All values containing the given string."""
  dosingPumps_contains: String

  """All values not containing the given string."""
  dosingPumps_not_contains: String

  """All values starting with the given string."""
  dosingPumps_starts_with: String

  """All values not starting with the given string."""
  dosingPumps_not_starts_with: String

  """All values ending with the given string."""
  dosingPumps_ends_with: String

  """All values not ending with the given string."""
  dosingPumps_not_ends_with: String
  others: String

  """All values that are not equal to given value."""
  others_not: String

  """All values that are contained in given list."""
  others_in: [String!]

  """All values that are not contained in given list."""
  others_not_in: [String!]

  """All values less than the given value."""
  others_lt: String

  """All values less than or equal the given value."""
  others_lte: String

  """All values greater than the given value."""
  others_gt: String

  """All values greater than or equal the given value."""
  others_gte: String

  """All values containing the given string."""
  others_contains: String

  """All values not containing the given string."""
  others_not_contains: String

  """All values starting with the given string."""
  others_starts_with: String

  """All values not starting with the given string."""
  others_not_starts_with: String

  """All values ending with the given string."""
  others_ends_with: String

  """All values not ending with the given string."""
  others_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  tank: TankWhereInput
}

input EquipmentWhereUniqueInput {
  id: ID
}

type Feed implements Node {
  id: ID!
  author: User!
  images(where: FeedImageWhereInput, orderBy: FeedImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FeedImage!]
  message: String!
  comments(where: FeedCommentWhereInput, orderBy: FeedCommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FeedComment!]
  likes(where: LikesFeedWhereInput, orderBy: LikesFeedOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LikesFeed!]
  updatedAt: DateTime!
  createdAt: DateTime!
}

type FeedComment implements Node {
  id: ID!
  feed: Feed!
  author: User!
  body: String!
  reply(where: FeedCommentReplyWhereInput, orderBy: FeedCommentReplyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FeedCommentReply!]
  likes(where: LikesFeedCommentWhereInput, orderBy: LikesFeedCommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LikesFeedComment!]
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type FeedCommentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FeedCommentEdge]!
  aggregate: AggregateFeedComment!
}

input FeedCommentCreateInput {
  body: String!
  feed: FeedCreateOneWithoutCommentsInput!
  author: UserCreateOneInput!
  reply: FeedCommentReplyCreateManyWithoutCommentInput
  likes: LikesFeedCommentCreateManyWithoutCommentInput
}

input FeedCommentCreateManyWithoutFeedInput {
  create: [FeedCommentCreateWithoutFeedInput!]
  connect: [FeedCommentWhereUniqueInput!]
}

input FeedCommentCreateOneWithoutLikesInput {
  create: FeedCommentCreateWithoutLikesInput
  connect: FeedCommentWhereUniqueInput
}

input FeedCommentCreateOneWithoutReplyInput {
  create: FeedCommentCreateWithoutReplyInput
  connect: FeedCommentWhereUniqueInput
}

input FeedCommentCreateWithoutFeedInput {
  body: String!
  author: UserCreateOneInput!
  reply: FeedCommentReplyCreateManyWithoutCommentInput
  likes: LikesFeedCommentCreateManyWithoutCommentInput
}

input FeedCommentCreateWithoutLikesInput {
  body: String!
  feed: FeedCreateOneWithoutCommentsInput!
  author: UserCreateOneInput!
  reply: FeedCommentReplyCreateManyWithoutCommentInput
}

input FeedCommentCreateWithoutReplyInput {
  body: String!
  feed: FeedCreateOneWithoutCommentsInput!
  author: UserCreateOneInput!
  likes: LikesFeedCommentCreateManyWithoutCommentInput
}

"""An edge in a connection."""
type FeedCommentEdge {
  """The item at the end of the edge."""
  node: FeedComment!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FeedCommentOrderByInput {
  id_ASC
  id_DESC
  body_ASC
  body_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type FeedCommentPreviousValues {
  id: ID!
  body: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type FeedCommentReply implements Node {
  id: ID!
  author: User!
  comment: FeedComment!
  body: String!
  likes(where: LikesFeedCommentReplyWhereInput, orderBy: LikesFeedCommentReplyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LikesFeedCommentReply!]
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type FeedCommentReplyConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FeedCommentReplyEdge]!
  aggregate: AggregateFeedCommentReply!
}

input FeedCommentReplyCreateInput {
  body: String!
  author: UserCreateOneInput!
  comment: FeedCommentCreateOneWithoutReplyInput!
  likes: LikesFeedCommentReplyCreateManyWithoutReplyInput
}

input FeedCommentReplyCreateManyWithoutCommentInput {
  create: [FeedCommentReplyCreateWithoutCommentInput!]
  connect: [FeedCommentReplyWhereUniqueInput!]
}

input FeedCommentReplyCreateOneWithoutLikesInput {
  create: FeedCommentReplyCreateWithoutLikesInput
  connect: FeedCommentReplyWhereUniqueInput
}

input FeedCommentReplyCreateWithoutCommentInput {
  body: String!
  author: UserCreateOneInput!
  likes: LikesFeedCommentReplyCreateManyWithoutReplyInput
}

input FeedCommentReplyCreateWithoutLikesInput {
  body: String!
  author: UserCreateOneInput!
  comment: FeedCommentCreateOneWithoutReplyInput!
}

"""An edge in a connection."""
type FeedCommentReplyEdge {
  """The item at the end of the edge."""
  node: FeedCommentReply!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FeedCommentReplyOrderByInput {
  id_ASC
  id_DESC
  body_ASC
  body_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type FeedCommentReplyPreviousValues {
  id: ID!
  body: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type FeedCommentReplySubscriptionPayload {
  mutation: MutationType!
  node: FeedCommentReply
  updatedFields: [String!]
  previousValues: FeedCommentReplyPreviousValues
}

input FeedCommentReplySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FeedCommentReplySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FeedCommentReplySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FeedCommentReplySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FeedCommentReplyWhereInput
}

input FeedCommentReplyUpdateInput {
  body: String
  author: UserUpdateOneRequiredInput
  comment: FeedCommentUpdateOneRequiredWithoutReplyInput
  likes: LikesFeedCommentReplyUpdateManyWithoutReplyInput
}

input FeedCommentReplyUpdateManyMutationInput {
  body: String
}

input FeedCommentReplyUpdateManyWithoutCommentInput {
  create: [FeedCommentReplyCreateWithoutCommentInput!]
  connect: [FeedCommentReplyWhereUniqueInput!]
  disconnect: [FeedCommentReplyWhereUniqueInput!]
  delete: [FeedCommentReplyWhereUniqueInput!]
  update: [FeedCommentReplyUpdateWithWhereUniqueWithoutCommentInput!]
  upsert: [FeedCommentReplyUpsertWithWhereUniqueWithoutCommentInput!]
}

input FeedCommentReplyUpdateOneRequiredWithoutLikesInput {
  create: FeedCommentReplyCreateWithoutLikesInput
  connect: FeedCommentReplyWhereUniqueInput
  update: FeedCommentReplyUpdateWithoutLikesDataInput
  upsert: FeedCommentReplyUpsertWithoutLikesInput
}

input FeedCommentReplyUpdateWithoutCommentDataInput {
  body: String
  author: UserUpdateOneRequiredInput
  likes: LikesFeedCommentReplyUpdateManyWithoutReplyInput
}

input FeedCommentReplyUpdateWithoutLikesDataInput {
  body: String
  author: UserUpdateOneRequiredInput
  comment: FeedCommentUpdateOneRequiredWithoutReplyInput
}

input FeedCommentReplyUpdateWithWhereUniqueWithoutCommentInput {
  where: FeedCommentReplyWhereUniqueInput!
  data: FeedCommentReplyUpdateWithoutCommentDataInput!
}

input FeedCommentReplyUpsertWithoutLikesInput {
  update: FeedCommentReplyUpdateWithoutLikesDataInput!
  create: FeedCommentReplyCreateWithoutLikesInput!
}

input FeedCommentReplyUpsertWithWhereUniqueWithoutCommentInput {
  where: FeedCommentReplyWhereUniqueInput!
  update: FeedCommentReplyUpdateWithoutCommentDataInput!
  create: FeedCommentReplyCreateWithoutCommentInput!
}

input FeedCommentReplyWhereInput {
  """Logical AND on all given filters."""
  AND: [FeedCommentReplyWhereInput!]

  """Logical OR on all given filters."""
  OR: [FeedCommentReplyWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FeedCommentReplyWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  body: String

  """All values that are not equal to given value."""
  body_not: String

  """All values that are contained in given list."""
  body_in: [String!]

  """All values that are not contained in given list."""
  body_not_in: [String!]

  """All values less than the given value."""
  body_lt: String

  """All values less than or equal the given value."""
  body_lte: String

  """All values greater than the given value."""
  body_gt: String

  """All values greater than or equal the given value."""
  body_gte: String

  """All values containing the given string."""
  body_contains: String

  """All values not containing the given string."""
  body_not_contains: String

  """All values starting with the given string."""
  body_starts_with: String

  """All values not starting with the given string."""
  body_not_starts_with: String

  """All values ending with the given string."""
  body_ends_with: String

  """All values not ending with the given string."""
  body_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  author: UserWhereInput
  comment: FeedCommentWhereInput
  likes_every: LikesFeedCommentReplyWhereInput
  likes_some: LikesFeedCommentReplyWhereInput
  likes_none: LikesFeedCommentReplyWhereInput
}

input FeedCommentReplyWhereUniqueInput {
  id: ID
}

type FeedCommentSubscriptionPayload {
  mutation: MutationType!
  node: FeedComment
  updatedFields: [String!]
  previousValues: FeedCommentPreviousValues
}

input FeedCommentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FeedCommentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FeedCommentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FeedCommentSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FeedCommentWhereInput
}

input FeedCommentUpdateInput {
  body: String
  feed: FeedUpdateOneRequiredWithoutCommentsInput
  author: UserUpdateOneRequiredInput
  reply: FeedCommentReplyUpdateManyWithoutCommentInput
  likes: LikesFeedCommentUpdateManyWithoutCommentInput
}

input FeedCommentUpdateManyMutationInput {
  body: String
}

input FeedCommentUpdateManyWithoutFeedInput {
  create: [FeedCommentCreateWithoutFeedInput!]
  connect: [FeedCommentWhereUniqueInput!]
  disconnect: [FeedCommentWhereUniqueInput!]
  delete: [FeedCommentWhereUniqueInput!]
  update: [FeedCommentUpdateWithWhereUniqueWithoutFeedInput!]
  upsert: [FeedCommentUpsertWithWhereUniqueWithoutFeedInput!]
}

input FeedCommentUpdateOneRequiredWithoutLikesInput {
  create: FeedCommentCreateWithoutLikesInput
  connect: FeedCommentWhereUniqueInput
  update: FeedCommentUpdateWithoutLikesDataInput
  upsert: FeedCommentUpsertWithoutLikesInput
}

input FeedCommentUpdateOneRequiredWithoutReplyInput {
  create: FeedCommentCreateWithoutReplyInput
  connect: FeedCommentWhereUniqueInput
  update: FeedCommentUpdateWithoutReplyDataInput
  upsert: FeedCommentUpsertWithoutReplyInput
}

input FeedCommentUpdateWithoutFeedDataInput {
  body: String
  author: UserUpdateOneRequiredInput
  reply: FeedCommentReplyUpdateManyWithoutCommentInput
  likes: LikesFeedCommentUpdateManyWithoutCommentInput
}

input FeedCommentUpdateWithoutLikesDataInput {
  body: String
  feed: FeedUpdateOneRequiredWithoutCommentsInput
  author: UserUpdateOneRequiredInput
  reply: FeedCommentReplyUpdateManyWithoutCommentInput
}

input FeedCommentUpdateWithoutReplyDataInput {
  body: String
  feed: FeedUpdateOneRequiredWithoutCommentsInput
  author: UserUpdateOneRequiredInput
  likes: LikesFeedCommentUpdateManyWithoutCommentInput
}

input FeedCommentUpdateWithWhereUniqueWithoutFeedInput {
  where: FeedCommentWhereUniqueInput!
  data: FeedCommentUpdateWithoutFeedDataInput!
}

input FeedCommentUpsertWithoutLikesInput {
  update: FeedCommentUpdateWithoutLikesDataInput!
  create: FeedCommentCreateWithoutLikesInput!
}

input FeedCommentUpsertWithoutReplyInput {
  update: FeedCommentUpdateWithoutReplyDataInput!
  create: FeedCommentCreateWithoutReplyInput!
}

input FeedCommentUpsertWithWhereUniqueWithoutFeedInput {
  where: FeedCommentWhereUniqueInput!
  update: FeedCommentUpdateWithoutFeedDataInput!
  create: FeedCommentCreateWithoutFeedInput!
}

input FeedCommentWhereInput {
  """Logical AND on all given filters."""
  AND: [FeedCommentWhereInput!]

  """Logical OR on all given filters."""
  OR: [FeedCommentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FeedCommentWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  body: String

  """All values that are not equal to given value."""
  body_not: String

  """All values that are contained in given list."""
  body_in: [String!]

  """All values that are not contained in given list."""
  body_not_in: [String!]

  """All values less than the given value."""
  body_lt: String

  """All values less than or equal the given value."""
  body_lte: String

  """All values greater than the given value."""
  body_gt: String

  """All values greater than or equal the given value."""
  body_gte: String

  """All values containing the given string."""
  body_contains: String

  """All values not containing the given string."""
  body_not_contains: String

  """All values starting with the given string."""
  body_starts_with: String

  """All values not starting with the given string."""
  body_not_starts_with: String

  """All values ending with the given string."""
  body_ends_with: String

  """All values not ending with the given string."""
  body_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  feed: FeedWhereInput
  author: UserWhereInput
  reply_every: FeedCommentReplyWhereInput
  reply_some: FeedCommentReplyWhereInput
  reply_none: FeedCommentReplyWhereInput
  likes_every: LikesFeedCommentWhereInput
  likes_some: LikesFeedCommentWhereInput
  likes_none: LikesFeedCommentWhereInput
}

input FeedCommentWhereUniqueInput {
  id: ID
}

"""A connection to a list of items."""
type FeedConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FeedEdge]!
  aggregate: AggregateFeed!
}

input FeedCreateInput {
  message: String!
  author: UserCreateOneWithoutFeedInput!
  images: FeedImageCreateManyWithoutFeedInput
  comments: FeedCommentCreateManyWithoutFeedInput
  likes: LikesFeedCreateManyWithoutFeedInput
}

input FeedCreateManyWithoutAuthorInput {
  create: [FeedCreateWithoutAuthorInput!]
  connect: [FeedWhereUniqueInput!]
}

input FeedCreateOneWithoutCommentsInput {
  create: FeedCreateWithoutCommentsInput
  connect: FeedWhereUniqueInput
}

input FeedCreateOneWithoutImagesInput {
  create: FeedCreateWithoutImagesInput
  connect: FeedWhereUniqueInput
}

input FeedCreateOneWithoutLikesInput {
  create: FeedCreateWithoutLikesInput
  connect: FeedWhereUniqueInput
}

input FeedCreateWithoutAuthorInput {
  message: String!
  images: FeedImageCreateManyWithoutFeedInput
  comments: FeedCommentCreateManyWithoutFeedInput
  likes: LikesFeedCreateManyWithoutFeedInput
}

input FeedCreateWithoutCommentsInput {
  message: String!
  author: UserCreateOneWithoutFeedInput!
  images: FeedImageCreateManyWithoutFeedInput
  likes: LikesFeedCreateManyWithoutFeedInput
}

input FeedCreateWithoutImagesInput {
  message: String!
  author: UserCreateOneWithoutFeedInput!
  comments: FeedCommentCreateManyWithoutFeedInput
  likes: LikesFeedCreateManyWithoutFeedInput
}

input FeedCreateWithoutLikesInput {
  message: String!
  author: UserCreateOneWithoutFeedInput!
  images: FeedImageCreateManyWithoutFeedInput
  comments: FeedCommentCreateManyWithoutFeedInput
}

"""An edge in a connection."""
type FeedEdge {
  """The item at the end of the edge."""
  node: Feed!

  """A cursor for use in pagination."""
  cursor: String!
}

type FeedImage implements Node {
  id: ID!
  url: String!
  feed: Feed!
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type FeedImageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FeedImageEdge]!
  aggregate: AggregateFeedImage!
}

input FeedImageCreateInput {
  url: String!
  feed: FeedCreateOneWithoutImagesInput!
}

input FeedImageCreateManyWithoutFeedInput {
  create: [FeedImageCreateWithoutFeedInput!]
  connect: [FeedImageWhereUniqueInput!]
}

input FeedImageCreateWithoutFeedInput {
  url: String!
}

"""An edge in a connection."""
type FeedImageEdge {
  """The item at the end of the edge."""
  node: FeedImage!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FeedImageOrderByInput {
  id_ASC
  id_DESC
  url_ASC
  url_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type FeedImagePreviousValues {
  id: ID!
  url: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type FeedImageSubscriptionPayload {
  mutation: MutationType!
  node: FeedImage
  updatedFields: [String!]
  previousValues: FeedImagePreviousValues
}

input FeedImageSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FeedImageSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FeedImageSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FeedImageSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FeedImageWhereInput
}

input FeedImageUpdateInput {
  url: String
  feed: FeedUpdateOneRequiredWithoutImagesInput
}

input FeedImageUpdateManyMutationInput {
  url: String
}

input FeedImageUpdateManyWithoutFeedInput {
  create: [FeedImageCreateWithoutFeedInput!]
  connect: [FeedImageWhereUniqueInput!]
  disconnect: [FeedImageWhereUniqueInput!]
  delete: [FeedImageWhereUniqueInput!]
  update: [FeedImageUpdateWithWhereUniqueWithoutFeedInput!]
  upsert: [FeedImageUpsertWithWhereUniqueWithoutFeedInput!]
}

input FeedImageUpdateWithoutFeedDataInput {
  url: String
}

input FeedImageUpdateWithWhereUniqueWithoutFeedInput {
  where: FeedImageWhereUniqueInput!
  data: FeedImageUpdateWithoutFeedDataInput!
}

input FeedImageUpsertWithWhereUniqueWithoutFeedInput {
  where: FeedImageWhereUniqueInput!
  update: FeedImageUpdateWithoutFeedDataInput!
  create: FeedImageCreateWithoutFeedInput!
}

input FeedImageWhereInput {
  """Logical AND on all given filters."""
  AND: [FeedImageWhereInput!]

  """Logical OR on all given filters."""
  OR: [FeedImageWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FeedImageWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  feed: FeedWhereInput
}

input FeedImageWhereUniqueInput {
  id: ID
}

enum FeedOrderByInput {
  id_ASC
  id_DESC
  message_ASC
  message_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type FeedPreviousValues {
  id: ID!
  message: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type FeedSubscriptionPayload {
  mutation: MutationType!
  node: Feed
  updatedFields: [String!]
  previousValues: FeedPreviousValues
}

input FeedSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FeedSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FeedSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FeedSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FeedWhereInput
}

input FeedUpdateInput {
  message: String
  author: UserUpdateOneRequiredWithoutFeedInput
  images: FeedImageUpdateManyWithoutFeedInput
  comments: FeedCommentUpdateManyWithoutFeedInput
  likes: LikesFeedUpdateManyWithoutFeedInput
}

input FeedUpdateManyMutationInput {
  message: String
}

input FeedUpdateManyWithoutAuthorInput {
  create: [FeedCreateWithoutAuthorInput!]
  connect: [FeedWhereUniqueInput!]
  disconnect: [FeedWhereUniqueInput!]
  delete: [FeedWhereUniqueInput!]
  update: [FeedUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [FeedUpsertWithWhereUniqueWithoutAuthorInput!]
}

input FeedUpdateOneRequiredWithoutCommentsInput {
  create: FeedCreateWithoutCommentsInput
  connect: FeedWhereUniqueInput
  update: FeedUpdateWithoutCommentsDataInput
  upsert: FeedUpsertWithoutCommentsInput
}

input FeedUpdateOneRequiredWithoutImagesInput {
  create: FeedCreateWithoutImagesInput
  connect: FeedWhereUniqueInput
  update: FeedUpdateWithoutImagesDataInput
  upsert: FeedUpsertWithoutImagesInput
}

input FeedUpdateOneRequiredWithoutLikesInput {
  create: FeedCreateWithoutLikesInput
  connect: FeedWhereUniqueInput
  update: FeedUpdateWithoutLikesDataInput
  upsert: FeedUpsertWithoutLikesInput
}

input FeedUpdateWithoutAuthorDataInput {
  message: String
  images: FeedImageUpdateManyWithoutFeedInput
  comments: FeedCommentUpdateManyWithoutFeedInput
  likes: LikesFeedUpdateManyWithoutFeedInput
}

input FeedUpdateWithoutCommentsDataInput {
  message: String
  author: UserUpdateOneRequiredWithoutFeedInput
  images: FeedImageUpdateManyWithoutFeedInput
  likes: LikesFeedUpdateManyWithoutFeedInput
}

input FeedUpdateWithoutImagesDataInput {
  message: String
  author: UserUpdateOneRequiredWithoutFeedInput
  comments: FeedCommentUpdateManyWithoutFeedInput
  likes: LikesFeedUpdateManyWithoutFeedInput
}

input FeedUpdateWithoutLikesDataInput {
  message: String
  author: UserUpdateOneRequiredWithoutFeedInput
  images: FeedImageUpdateManyWithoutFeedInput
  comments: FeedCommentUpdateManyWithoutFeedInput
}

input FeedUpdateWithWhereUniqueWithoutAuthorInput {
  where: FeedWhereUniqueInput!
  data: FeedUpdateWithoutAuthorDataInput!
}

input FeedUpsertWithoutCommentsInput {
  update: FeedUpdateWithoutCommentsDataInput!
  create: FeedCreateWithoutCommentsInput!
}

input FeedUpsertWithoutImagesInput {
  update: FeedUpdateWithoutImagesDataInput!
  create: FeedCreateWithoutImagesInput!
}

input FeedUpsertWithoutLikesInput {
  update: FeedUpdateWithoutLikesDataInput!
  create: FeedCreateWithoutLikesInput!
}

input FeedUpsertWithWhereUniqueWithoutAuthorInput {
  where: FeedWhereUniqueInput!
  update: FeedUpdateWithoutAuthorDataInput!
  create: FeedCreateWithoutAuthorInput!
}

input FeedWhereInput {
  """Logical AND on all given filters."""
  AND: [FeedWhereInput!]

  """Logical OR on all given filters."""
  OR: [FeedWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FeedWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  message: String

  """All values that are not equal to given value."""
  message_not: String

  """All values that are contained in given list."""
  message_in: [String!]

  """All values that are not contained in given list."""
  message_not_in: [String!]

  """All values less than the given value."""
  message_lt: String

  """All values less than or equal the given value."""
  message_lte: String

  """All values greater than the given value."""
  message_gt: String

  """All values greater than or equal the given value."""
  message_gte: String

  """All values containing the given string."""
  message_contains: String

  """All values not containing the given string."""
  message_not_contains: String

  """All values starting with the given string."""
  message_starts_with: String

  """All values not starting with the given string."""
  message_not_starts_with: String

  """All values ending with the given string."""
  message_ends_with: String

  """All values not ending with the given string."""
  message_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  author: UserWhereInput
  images_every: FeedImageWhereInput
  images_some: FeedImageWhereInput
  images_none: FeedImageWhereInput
  comments_every: FeedCommentWhereInput
  comments_some: FeedCommentWhereInput
  comments_none: FeedCommentWhereInput
  likes_every: LikesFeedWhereInput
  likes_some: LikesFeedWhereInput
  likes_none: LikesFeedWhereInput
}

input FeedWhereUniqueInput {
  id: ID
}

type Follower implements Node {
  id: ID!
  user: User!
}

"""A connection to a list of items."""
type FollowerConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FollowerEdge]!
  aggregate: AggregateFollower!
}

input FollowerCreateInput {
  user: UserCreateOneWithoutFollowersInput!
}

input FollowerCreateManyWithoutUserInput {
  connect: [FollowerWhereUniqueInput!]
}

"""An edge in a connection."""
type FollowerEdge {
  """The item at the end of the edge."""
  node: Follower!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FollowerOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type FollowerPreviousValues {
  id: ID!
}

type FollowerSubscriptionPayload {
  mutation: MutationType!
  node: Follower
  updatedFields: [String!]
  previousValues: FollowerPreviousValues
}

input FollowerSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FollowerSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FollowerSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FollowerSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FollowerWhereInput
}

input FollowerUpdateInput {
  user: UserUpdateOneRequiredWithoutFollowersInput
}

input FollowerUpdateManyWithoutUserInput {
  connect: [FollowerWhereUniqueInput!]
  disconnect: [FollowerWhereUniqueInput!]
  delete: [FollowerWhereUniqueInput!]
}

input FollowerWhereInput {
  """Logical AND on all given filters."""
  AND: [FollowerWhereInput!]

  """Logical OR on all given filters."""
  OR: [FollowerWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FollowerWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  user: UserWhereInput
}

input FollowerWhereUniqueInput {
  id: ID
}

type Following implements Node {
  id: ID!
  user: User!
}

"""A connection to a list of items."""
type FollowingConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FollowingEdge]!
  aggregate: AggregateFollowing!
}

input FollowingCreateInput {
  user: UserCreateOneWithoutFollowingsInput!
}

input FollowingCreateManyWithoutUserInput {
  connect: [FollowingWhereUniqueInput!]
}

"""An edge in a connection."""
type FollowingEdge {
  """The item at the end of the edge."""
  node: Following!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FollowingOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type FollowingPreviousValues {
  id: ID!
}

type FollowingSubscriptionPayload {
  mutation: MutationType!
  node: Following
  updatedFields: [String!]
  previousValues: FollowingPreviousValues
}

input FollowingSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FollowingSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FollowingSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FollowingSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FollowingWhereInput
}

input FollowingUpdateInput {
  user: UserUpdateOneRequiredWithoutFollowingsInput
}

input FollowingUpdateManyWithoutUserInput {
  connect: [FollowingWhereUniqueInput!]
  disconnect: [FollowingWhereUniqueInput!]
  delete: [FollowingWhereUniqueInput!]
}

input FollowingWhereInput {
  """Logical AND on all given filters."""
  AND: [FollowingWhereInput!]

  """Logical OR on all given filters."""
  OR: [FollowingWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FollowingWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  user: UserWhereInput
}

input FollowingWhereUniqueInput {
  id: ID
}

"""Raw JSON value"""
scalar Json

type LikesCoral implements Node {
  id: ID!
  coral: Coral!
  author: User!
}

"""A connection to a list of items."""
type LikesCoralConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LikesCoralEdge]!
  aggregate: AggregateLikesCoral!
}

input LikesCoralCreateInput {
  coral: CoralCreateOneWithoutLikesInput!
  author: UserCreateOneInput!
}

input LikesCoralCreateManyWithoutCoralInput {
  create: [LikesCoralCreateWithoutCoralInput!]
  connect: [LikesCoralWhereUniqueInput!]
}

input LikesCoralCreateWithoutCoralInput {
  author: UserCreateOneInput!
}

"""An edge in a connection."""
type LikesCoralEdge {
  """The item at the end of the edge."""
  node: LikesCoral!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LikesCoralOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type LikesCoralPreviousValues {
  id: ID!
}

type LikesCoralSubscriptionPayload {
  mutation: MutationType!
  node: LikesCoral
  updatedFields: [String!]
  previousValues: LikesCoralPreviousValues
}

input LikesCoralSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LikesCoralSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LikesCoralSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LikesCoralSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LikesCoralWhereInput
}

input LikesCoralUpdateInput {
  coral: CoralUpdateOneRequiredWithoutLikesInput
  author: UserUpdateOneRequiredInput
}

input LikesCoralUpdateManyWithoutCoralInput {
  create: [LikesCoralCreateWithoutCoralInput!]
  connect: [LikesCoralWhereUniqueInput!]
  disconnect: [LikesCoralWhereUniqueInput!]
  delete: [LikesCoralWhereUniqueInput!]
  update: [LikesCoralUpdateWithWhereUniqueWithoutCoralInput!]
  upsert: [LikesCoralUpsertWithWhereUniqueWithoutCoralInput!]
}

input LikesCoralUpdateWithoutCoralDataInput {
  author: UserUpdateOneRequiredInput
}

input LikesCoralUpdateWithWhereUniqueWithoutCoralInput {
  where: LikesCoralWhereUniqueInput!
  data: LikesCoralUpdateWithoutCoralDataInput!
}

input LikesCoralUpsertWithWhereUniqueWithoutCoralInput {
  where: LikesCoralWhereUniqueInput!
  update: LikesCoralUpdateWithoutCoralDataInput!
  create: LikesCoralCreateWithoutCoralInput!
}

input LikesCoralWhereInput {
  """Logical AND on all given filters."""
  AND: [LikesCoralWhereInput!]

  """Logical OR on all given filters."""
  OR: [LikesCoralWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LikesCoralWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  coral: CoralWhereInput
  author: UserWhereInput
}

input LikesCoralWhereUniqueInput {
  id: ID
}

type LikesFeed implements Node {
  id: ID!
  user: User!
  feed: Feed!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type LikesFeedComment implements Node {
  id: ID!
  user: User!
  Comment: FeedComment!
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type LikesFeedCommentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LikesFeedCommentEdge]!
  aggregate: AggregateLikesFeedComment!
}

input LikesFeedCommentCreateInput {
  user: UserCreateOneInput!
  Comment: FeedCommentCreateOneWithoutLikesInput!
}

input LikesFeedCommentCreateManyWithoutCommentInput {
  create: [LikesFeedCommentCreateWithoutCommentInput!]
  connect: [LikesFeedCommentWhereUniqueInput!]
}

input LikesFeedCommentCreateWithoutCommentInput {
  user: UserCreateOneInput!
}

"""An edge in a connection."""
type LikesFeedCommentEdge {
  """The item at the end of the edge."""
  node: LikesFeedComment!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LikesFeedCommentOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type LikesFeedCommentPreviousValues {
  id: ID!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type LikesFeedCommentReply implements Node {
  id: ID!
  user: User!
  reply: FeedCommentReply!
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type LikesFeedCommentReplyConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LikesFeedCommentReplyEdge]!
  aggregate: AggregateLikesFeedCommentReply!
}

input LikesFeedCommentReplyCreateInput {
  user: UserCreateOneInput!
  reply: FeedCommentReplyCreateOneWithoutLikesInput!
}

input LikesFeedCommentReplyCreateManyWithoutReplyInput {
  create: [LikesFeedCommentReplyCreateWithoutReplyInput!]
  connect: [LikesFeedCommentReplyWhereUniqueInput!]
}

input LikesFeedCommentReplyCreateWithoutReplyInput {
  user: UserCreateOneInput!
}

"""An edge in a connection."""
type LikesFeedCommentReplyEdge {
  """The item at the end of the edge."""
  node: LikesFeedCommentReply!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LikesFeedCommentReplyOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type LikesFeedCommentReplyPreviousValues {
  id: ID!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type LikesFeedCommentReplySubscriptionPayload {
  mutation: MutationType!
  node: LikesFeedCommentReply
  updatedFields: [String!]
  previousValues: LikesFeedCommentReplyPreviousValues
}

input LikesFeedCommentReplySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LikesFeedCommentReplySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LikesFeedCommentReplySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LikesFeedCommentReplySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LikesFeedCommentReplyWhereInput
}

input LikesFeedCommentReplyUpdateInput {
  user: UserUpdateOneRequiredInput
  reply: FeedCommentReplyUpdateOneRequiredWithoutLikesInput
}

input LikesFeedCommentReplyUpdateManyWithoutReplyInput {
  create: [LikesFeedCommentReplyCreateWithoutReplyInput!]
  connect: [LikesFeedCommentReplyWhereUniqueInput!]
  disconnect: [LikesFeedCommentReplyWhereUniqueInput!]
  delete: [LikesFeedCommentReplyWhereUniqueInput!]
  update: [LikesFeedCommentReplyUpdateWithWhereUniqueWithoutReplyInput!]
  upsert: [LikesFeedCommentReplyUpsertWithWhereUniqueWithoutReplyInput!]
}

input LikesFeedCommentReplyUpdateWithoutReplyDataInput {
  user: UserUpdateOneRequiredInput
}

input LikesFeedCommentReplyUpdateWithWhereUniqueWithoutReplyInput {
  where: LikesFeedCommentReplyWhereUniqueInput!
  data: LikesFeedCommentReplyUpdateWithoutReplyDataInput!
}

input LikesFeedCommentReplyUpsertWithWhereUniqueWithoutReplyInput {
  where: LikesFeedCommentReplyWhereUniqueInput!
  update: LikesFeedCommentReplyUpdateWithoutReplyDataInput!
  create: LikesFeedCommentReplyCreateWithoutReplyInput!
}

input LikesFeedCommentReplyWhereInput {
  """Logical AND on all given filters."""
  AND: [LikesFeedCommentReplyWhereInput!]

  """Logical OR on all given filters."""
  OR: [LikesFeedCommentReplyWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LikesFeedCommentReplyWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  user: UserWhereInput
  reply: FeedCommentReplyWhereInput
}

input LikesFeedCommentReplyWhereUniqueInput {
  id: ID
}

type LikesFeedCommentSubscriptionPayload {
  mutation: MutationType!
  node: LikesFeedComment
  updatedFields: [String!]
  previousValues: LikesFeedCommentPreviousValues
}

input LikesFeedCommentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LikesFeedCommentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LikesFeedCommentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LikesFeedCommentSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LikesFeedCommentWhereInput
}

input LikesFeedCommentUpdateInput {
  user: UserUpdateOneRequiredInput
  Comment: FeedCommentUpdateOneRequiredWithoutLikesInput
}

input LikesFeedCommentUpdateManyWithoutCommentInput {
  create: [LikesFeedCommentCreateWithoutCommentInput!]
  connect: [LikesFeedCommentWhereUniqueInput!]
  disconnect: [LikesFeedCommentWhereUniqueInput!]
  delete: [LikesFeedCommentWhereUniqueInput!]
  update: [LikesFeedCommentUpdateWithWhereUniqueWithoutCommentInput!]
  upsert: [LikesFeedCommentUpsertWithWhereUniqueWithoutCommentInput!]
}

input LikesFeedCommentUpdateWithoutCommentDataInput {
  user: UserUpdateOneRequiredInput
}

input LikesFeedCommentUpdateWithWhereUniqueWithoutCommentInput {
  where: LikesFeedCommentWhereUniqueInput!
  data: LikesFeedCommentUpdateWithoutCommentDataInput!
}

input LikesFeedCommentUpsertWithWhereUniqueWithoutCommentInput {
  where: LikesFeedCommentWhereUniqueInput!
  update: LikesFeedCommentUpdateWithoutCommentDataInput!
  create: LikesFeedCommentCreateWithoutCommentInput!
}

input LikesFeedCommentWhereInput {
  """Logical AND on all given filters."""
  AND: [LikesFeedCommentWhereInput!]

  """Logical OR on all given filters."""
  OR: [LikesFeedCommentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LikesFeedCommentWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  user: UserWhereInput
  Comment: FeedCommentWhereInput
}

input LikesFeedCommentWhereUniqueInput {
  id: ID
}

"""A connection to a list of items."""
type LikesFeedConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LikesFeedEdge]!
  aggregate: AggregateLikesFeed!
}

input LikesFeedCreateInput {
  user: UserCreateOneInput!
  feed: FeedCreateOneWithoutLikesInput!
}

input LikesFeedCreateManyWithoutFeedInput {
  create: [LikesFeedCreateWithoutFeedInput!]
  connect: [LikesFeedWhereUniqueInput!]
}

input LikesFeedCreateWithoutFeedInput {
  user: UserCreateOneInput!
}

"""An edge in a connection."""
type LikesFeedEdge {
  """The item at the end of the edge."""
  node: LikesFeed!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LikesFeedOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type LikesFeedPreviousValues {
  id: ID!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type LikesFeedSubscriptionPayload {
  mutation: MutationType!
  node: LikesFeed
  updatedFields: [String!]
  previousValues: LikesFeedPreviousValues
}

input LikesFeedSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LikesFeedSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LikesFeedSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LikesFeedSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LikesFeedWhereInput
}

input LikesFeedUpdateInput {
  user: UserUpdateOneRequiredInput
  feed: FeedUpdateOneRequiredWithoutLikesInput
}

input LikesFeedUpdateManyWithoutFeedInput {
  create: [LikesFeedCreateWithoutFeedInput!]
  connect: [LikesFeedWhereUniqueInput!]
  disconnect: [LikesFeedWhereUniqueInput!]
  delete: [LikesFeedWhereUniqueInput!]
  update: [LikesFeedUpdateWithWhereUniqueWithoutFeedInput!]
  upsert: [LikesFeedUpsertWithWhereUniqueWithoutFeedInput!]
}

input LikesFeedUpdateWithoutFeedDataInput {
  user: UserUpdateOneRequiredInput
}

input LikesFeedUpdateWithWhereUniqueWithoutFeedInput {
  where: LikesFeedWhereUniqueInput!
  data: LikesFeedUpdateWithoutFeedDataInput!
}

input LikesFeedUpsertWithWhereUniqueWithoutFeedInput {
  where: LikesFeedWhereUniqueInput!
  update: LikesFeedUpdateWithoutFeedDataInput!
  create: LikesFeedCreateWithoutFeedInput!
}

input LikesFeedWhereInput {
  """Logical AND on all given filters."""
  AND: [LikesFeedWhereInput!]

  """Logical OR on all given filters."""
  OR: [LikesFeedWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LikesFeedWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  user: UserWhereInput
  feed: FeedWhereInput
}

input LikesFeedWhereUniqueInput {
  id: ID
}

type LikesTank implements Node {
  id: ID!
  tank: Tank!
  author: User!
}

"""A connection to a list of items."""
type LikesTankConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LikesTankEdge]!
  aggregate: AggregateLikesTank!
}

input LikesTankCreateInput {
  tank: TankCreateOneWithoutLikesInput!
  author: UserCreateOneInput!
}

input LikesTankCreateManyWithoutTankInput {
  create: [LikesTankCreateWithoutTankInput!]
  connect: [LikesTankWhereUniqueInput!]
}

input LikesTankCreateWithoutTankInput {
  author: UserCreateOneInput!
}

"""An edge in a connection."""
type LikesTankEdge {
  """The item at the end of the edge."""
  node: LikesTank!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LikesTankOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type LikesTankPost implements Node {
  id: ID!
  post: TankPost!
  author: User!
}

"""A connection to a list of items."""
type LikesTankPostConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LikesTankPostEdge]!
  aggregate: AggregateLikesTankPost!
}

input LikesTankPostCreateInput {
  post: TankPostCreateOneWithoutLikesInput!
  author: UserCreateOneInput!
}

input LikesTankPostCreateManyWithoutPostInput {
  create: [LikesTankPostCreateWithoutPostInput!]
  connect: [LikesTankPostWhereUniqueInput!]
}

input LikesTankPostCreateWithoutPostInput {
  author: UserCreateOneInput!
}

"""An edge in a connection."""
type LikesTankPostEdge {
  """The item at the end of the edge."""
  node: LikesTankPost!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LikesTankPostOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type LikesTankPostPreviousValues {
  id: ID!
}

type LikesTankPostSubscriptionPayload {
  mutation: MutationType!
  node: LikesTankPost
  updatedFields: [String!]
  previousValues: LikesTankPostPreviousValues
}

input LikesTankPostSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LikesTankPostSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LikesTankPostSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LikesTankPostSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LikesTankPostWhereInput
}

input LikesTankPostUpdateInput {
  post: TankPostUpdateOneRequiredWithoutLikesInput
  author: UserUpdateOneRequiredInput
}

input LikesTankPostUpdateManyWithoutPostInput {
  create: [LikesTankPostCreateWithoutPostInput!]
  connect: [LikesTankPostWhereUniqueInput!]
  disconnect: [LikesTankPostWhereUniqueInput!]
  delete: [LikesTankPostWhereUniqueInput!]
  update: [LikesTankPostUpdateWithWhereUniqueWithoutPostInput!]
  upsert: [LikesTankPostUpsertWithWhereUniqueWithoutPostInput!]
}

input LikesTankPostUpdateWithoutPostDataInput {
  author: UserUpdateOneRequiredInput
}

input LikesTankPostUpdateWithWhereUniqueWithoutPostInput {
  where: LikesTankPostWhereUniqueInput!
  data: LikesTankPostUpdateWithoutPostDataInput!
}

input LikesTankPostUpsertWithWhereUniqueWithoutPostInput {
  where: LikesTankPostWhereUniqueInput!
  update: LikesTankPostUpdateWithoutPostDataInput!
  create: LikesTankPostCreateWithoutPostInput!
}

input LikesTankPostWhereInput {
  """Logical AND on all given filters."""
  AND: [LikesTankPostWhereInput!]

  """Logical OR on all given filters."""
  OR: [LikesTankPostWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LikesTankPostWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  post: TankPostWhereInput
  author: UserWhereInput
}

input LikesTankPostWhereUniqueInput {
  id: ID
}

type LikesTankPreviousValues {
  id: ID!
}

type LikesTankReply implements Node {
  id: ID!
  author: User!
  reply: TankReply!
}

"""A connection to a list of items."""
type LikesTankReplyConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LikesTankReplyEdge]!
  aggregate: AggregateLikesTankReply!
}

input LikesTankReplyCreateInput {
  author: UserCreateOneInput!
  reply: TankReplyCreateOneWithoutLikesInput!
}

input LikesTankReplyCreateManyWithoutReplyInput {
  create: [LikesTankReplyCreateWithoutReplyInput!]
  connect: [LikesTankReplyWhereUniqueInput!]
}

input LikesTankReplyCreateWithoutReplyInput {
  author: UserCreateOneInput!
}

"""An edge in a connection."""
type LikesTankReplyEdge {
  """The item at the end of the edge."""
  node: LikesTankReply!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LikesTankReplyOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type LikesTankReplyPreviousValues {
  id: ID!
}

type LikesTankReplySubscriptionPayload {
  mutation: MutationType!
  node: LikesTankReply
  updatedFields: [String!]
  previousValues: LikesTankReplyPreviousValues
}

input LikesTankReplySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LikesTankReplySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LikesTankReplySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LikesTankReplySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LikesTankReplyWhereInput
}

input LikesTankReplyUpdateInput {
  author: UserUpdateOneRequiredInput
  reply: TankReplyUpdateOneRequiredWithoutLikesInput
}

input LikesTankReplyUpdateManyWithoutReplyInput {
  create: [LikesTankReplyCreateWithoutReplyInput!]
  connect: [LikesTankReplyWhereUniqueInput!]
  disconnect: [LikesTankReplyWhereUniqueInput!]
  delete: [LikesTankReplyWhereUniqueInput!]
  update: [LikesTankReplyUpdateWithWhereUniqueWithoutReplyInput!]
  upsert: [LikesTankReplyUpsertWithWhereUniqueWithoutReplyInput!]
}

input LikesTankReplyUpdateWithoutReplyDataInput {
  author: UserUpdateOneRequiredInput
}

input LikesTankReplyUpdateWithWhereUniqueWithoutReplyInput {
  where: LikesTankReplyWhereUniqueInput!
  data: LikesTankReplyUpdateWithoutReplyDataInput!
}

input LikesTankReplyUpsertWithWhereUniqueWithoutReplyInput {
  where: LikesTankReplyWhereUniqueInput!
  update: LikesTankReplyUpdateWithoutReplyDataInput!
  create: LikesTankReplyCreateWithoutReplyInput!
}

input LikesTankReplyWhereInput {
  """Logical AND on all given filters."""
  AND: [LikesTankReplyWhereInput!]

  """Logical OR on all given filters."""
  OR: [LikesTankReplyWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LikesTankReplyWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  author: UserWhereInput
  reply: TankReplyWhereInput
}

input LikesTankReplyWhereUniqueInput {
  id: ID
}

type LikesTankSubscriptionPayload {
  mutation: MutationType!
  node: LikesTank
  updatedFields: [String!]
  previousValues: LikesTankPreviousValues
}

input LikesTankSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LikesTankSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LikesTankSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LikesTankSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LikesTankWhereInput
}

input LikesTankUpdateInput {
  tank: TankUpdateOneRequiredWithoutLikesInput
  author: UserUpdateOneRequiredInput
}

input LikesTankUpdateManyWithoutTankInput {
  create: [LikesTankCreateWithoutTankInput!]
  connect: [LikesTankWhereUniqueInput!]
  disconnect: [LikesTankWhereUniqueInput!]
  delete: [LikesTankWhereUniqueInput!]
  update: [LikesTankUpdateWithWhereUniqueWithoutTankInput!]
  upsert: [LikesTankUpsertWithWhereUniqueWithoutTankInput!]
}

input LikesTankUpdateWithoutTankDataInput {
  author: UserUpdateOneRequiredInput
}

input LikesTankUpdateWithWhereUniqueWithoutTankInput {
  where: LikesTankWhereUniqueInput!
  data: LikesTankUpdateWithoutTankDataInput!
}

input LikesTankUpsertWithWhereUniqueWithoutTankInput {
  where: LikesTankWhereUniqueInput!
  update: LikesTankUpdateWithoutTankDataInput!
  create: LikesTankCreateWithoutTankInput!
}

input LikesTankWhereInput {
  """Logical AND on all given filters."""
  AND: [LikesTankWhereInput!]

  """Logical OR on all given filters."""
  OR: [LikesTankWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LikesTankWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  tank: TankWhereInput
  author: UserWhereInput
}

input LikesTankWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createProfilePicture(data: ProfilePictureCreateInput!): ProfilePicture!
  createProfile(data: ProfileCreateInput!): Profile!
  createTank(data: TankCreateInput!): Tank!
  createEquipment(data: EquipmentCreateInput!): Equipment!
  createWaterParameters(data: WaterParametersCreateInput!): WaterParameters!
  createTankPost(data: TankPostCreateInput!): TankPost!
  createTankReply(data: TankReplyCreateInput!): TankReply!
  createCoral(data: CoralCreateInput!): Coral!
  createLikesTankReply(data: LikesTankReplyCreateInput!): LikesTankReply!
  createLikesTankPost(data: LikesTankPostCreateInput!): LikesTankPost!
  createLikesCoral(data: LikesCoralCreateInput!): LikesCoral!
  createLikesTank(data: LikesTankCreateInput!): LikesTank!
  createTankImage(data: TankImageCreateInput!): TankImage!
  createFollower(data: FollowerCreateInput!): Follower!
  createFollowing(data: FollowingCreateInput!): Following!
  createFeed(data: FeedCreateInput!): Feed!
  createLikesFeed(data: LikesFeedCreateInput!): LikesFeed!
  createFeedComment(data: FeedCommentCreateInput!): FeedComment!
  createLikesFeedComment(data: LikesFeedCommentCreateInput!): LikesFeedComment!
  createFeedCommentReply(data: FeedCommentReplyCreateInput!): FeedCommentReply!
  createLikesFeedCommentReply(data: LikesFeedCommentReplyCreateInput!): LikesFeedCommentReply!
  createFeedImage(data: FeedImageCreateInput!): FeedImage!
  createUser(data: UserCreateInput!): User!
  updateProfilePicture(data: ProfilePictureUpdateInput!, where: ProfilePictureWhereUniqueInput!): ProfilePicture
  updateProfile(data: ProfileUpdateInput!, where: ProfileWhereUniqueInput!): Profile
  updateTank(data: TankUpdateInput!, where: TankWhereUniqueInput!): Tank
  updateEquipment(data: EquipmentUpdateInput!, where: EquipmentWhereUniqueInput!): Equipment
  updateWaterParameters(data: WaterParametersUpdateInput!, where: WaterParametersWhereUniqueInput!): WaterParameters
  updateTankPost(data: TankPostUpdateInput!, where: TankPostWhereUniqueInput!): TankPost
  updateTankReply(data: TankReplyUpdateInput!, where: TankReplyWhereUniqueInput!): TankReply
  updateCoral(data: CoralUpdateInput!, where: CoralWhereUniqueInput!): Coral
  updateLikesTankReply(data: LikesTankReplyUpdateInput!, where: LikesTankReplyWhereUniqueInput!): LikesTankReply
  updateLikesTankPost(data: LikesTankPostUpdateInput!, where: LikesTankPostWhereUniqueInput!): LikesTankPost
  updateLikesCoral(data: LikesCoralUpdateInput!, where: LikesCoralWhereUniqueInput!): LikesCoral
  updateLikesTank(data: LikesTankUpdateInput!, where: LikesTankWhereUniqueInput!): LikesTank
  updateTankImage(data: TankImageUpdateInput!, where: TankImageWhereUniqueInput!): TankImage
  updateFollower(data: FollowerUpdateInput!, where: FollowerWhereUniqueInput!): Follower
  updateFollowing(data: FollowingUpdateInput!, where: FollowingWhereUniqueInput!): Following
  updateFeed(data: FeedUpdateInput!, where: FeedWhereUniqueInput!): Feed
  updateLikesFeed(data: LikesFeedUpdateInput!, where: LikesFeedWhereUniqueInput!): LikesFeed
  updateFeedComment(data: FeedCommentUpdateInput!, where: FeedCommentWhereUniqueInput!): FeedComment
  updateLikesFeedComment(data: LikesFeedCommentUpdateInput!, where: LikesFeedCommentWhereUniqueInput!): LikesFeedComment
  updateFeedCommentReply(data: FeedCommentReplyUpdateInput!, where: FeedCommentReplyWhereUniqueInput!): FeedCommentReply
  updateLikesFeedCommentReply(data: LikesFeedCommentReplyUpdateInput!, where: LikesFeedCommentReplyWhereUniqueInput!): LikesFeedCommentReply
  updateFeedImage(data: FeedImageUpdateInput!, where: FeedImageWhereUniqueInput!): FeedImage
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteProfilePicture(where: ProfilePictureWhereUniqueInput!): ProfilePicture
  deleteProfile(where: ProfileWhereUniqueInput!): Profile
  deleteTank(where: TankWhereUniqueInput!): Tank
  deleteEquipment(where: EquipmentWhereUniqueInput!): Equipment
  deleteWaterParameters(where: WaterParametersWhereUniqueInput!): WaterParameters
  deleteTankPost(where: TankPostWhereUniqueInput!): TankPost
  deleteTankReply(where: TankReplyWhereUniqueInput!): TankReply
  deleteCoral(where: CoralWhereUniqueInput!): Coral
  deleteLikesTankReply(where: LikesTankReplyWhereUniqueInput!): LikesTankReply
  deleteLikesTankPost(where: LikesTankPostWhereUniqueInput!): LikesTankPost
  deleteLikesCoral(where: LikesCoralWhereUniqueInput!): LikesCoral
  deleteLikesTank(where: LikesTankWhereUniqueInput!): LikesTank
  deleteTankImage(where: TankImageWhereUniqueInput!): TankImage
  deleteFollower(where: FollowerWhereUniqueInput!): Follower
  deleteFollowing(where: FollowingWhereUniqueInput!): Following
  deleteFeed(where: FeedWhereUniqueInput!): Feed
  deleteLikesFeed(where: LikesFeedWhereUniqueInput!): LikesFeed
  deleteFeedComment(where: FeedCommentWhereUniqueInput!): FeedComment
  deleteLikesFeedComment(where: LikesFeedCommentWhereUniqueInput!): LikesFeedComment
  deleteFeedCommentReply(where: FeedCommentReplyWhereUniqueInput!): FeedCommentReply
  deleteLikesFeedCommentReply(where: LikesFeedCommentReplyWhereUniqueInput!): LikesFeedCommentReply
  deleteFeedImage(where: FeedImageWhereUniqueInput!): FeedImage
  deleteUser(where: UserWhereUniqueInput!): User
  upsertProfilePicture(where: ProfilePictureWhereUniqueInput!, create: ProfilePictureCreateInput!, update: ProfilePictureUpdateInput!): ProfilePicture!
  upsertProfile(where: ProfileWhereUniqueInput!, create: ProfileCreateInput!, update: ProfileUpdateInput!): Profile!
  upsertTank(where: TankWhereUniqueInput!, create: TankCreateInput!, update: TankUpdateInput!): Tank!
  upsertEquipment(where: EquipmentWhereUniqueInput!, create: EquipmentCreateInput!, update: EquipmentUpdateInput!): Equipment!
  upsertWaterParameters(where: WaterParametersWhereUniqueInput!, create: WaterParametersCreateInput!, update: WaterParametersUpdateInput!): WaterParameters!
  upsertTankPost(where: TankPostWhereUniqueInput!, create: TankPostCreateInput!, update: TankPostUpdateInput!): TankPost!
  upsertTankReply(where: TankReplyWhereUniqueInput!, create: TankReplyCreateInput!, update: TankReplyUpdateInput!): TankReply!
  upsertCoral(where: CoralWhereUniqueInput!, create: CoralCreateInput!, update: CoralUpdateInput!): Coral!
  upsertLikesTankReply(where: LikesTankReplyWhereUniqueInput!, create: LikesTankReplyCreateInput!, update: LikesTankReplyUpdateInput!): LikesTankReply!
  upsertLikesTankPost(where: LikesTankPostWhereUniqueInput!, create: LikesTankPostCreateInput!, update: LikesTankPostUpdateInput!): LikesTankPost!
  upsertLikesCoral(where: LikesCoralWhereUniqueInput!, create: LikesCoralCreateInput!, update: LikesCoralUpdateInput!): LikesCoral!
  upsertLikesTank(where: LikesTankWhereUniqueInput!, create: LikesTankCreateInput!, update: LikesTankUpdateInput!): LikesTank!
  upsertTankImage(where: TankImageWhereUniqueInput!, create: TankImageCreateInput!, update: TankImageUpdateInput!): TankImage!
  upsertFollower(where: FollowerWhereUniqueInput!, create: FollowerCreateInput!, update: FollowerUpdateInput!): Follower!
  upsertFollowing(where: FollowingWhereUniqueInput!, create: FollowingCreateInput!, update: FollowingUpdateInput!): Following!
  upsertFeed(where: FeedWhereUniqueInput!, create: FeedCreateInput!, update: FeedUpdateInput!): Feed!
  upsertLikesFeed(where: LikesFeedWhereUniqueInput!, create: LikesFeedCreateInput!, update: LikesFeedUpdateInput!): LikesFeed!
  upsertFeedComment(where: FeedCommentWhereUniqueInput!, create: FeedCommentCreateInput!, update: FeedCommentUpdateInput!): FeedComment!
  upsertLikesFeedComment(where: LikesFeedCommentWhereUniqueInput!, create: LikesFeedCommentCreateInput!, update: LikesFeedCommentUpdateInput!): LikesFeedComment!
  upsertFeedCommentReply(where: FeedCommentReplyWhereUniqueInput!, create: FeedCommentReplyCreateInput!, update: FeedCommentReplyUpdateInput!): FeedCommentReply!
  upsertLikesFeedCommentReply(where: LikesFeedCommentReplyWhereUniqueInput!, create: LikesFeedCommentReplyCreateInput!, update: LikesFeedCommentReplyUpdateInput!): LikesFeedCommentReply!
  upsertFeedImage(where: FeedImageWhereUniqueInput!, create: FeedImageCreateInput!, update: FeedImageUpdateInput!): FeedImage!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManyProfilePictures(data: ProfilePictureUpdateManyMutationInput!, where: ProfilePictureWhereInput): BatchPayload!
  updateManyTanks(data: TankUpdateManyMutationInput!, where: TankWhereInput): BatchPayload!
  updateManyEquipments(data: EquipmentUpdateManyMutationInput!, where: EquipmentWhereInput): BatchPayload!
  updateManyWaterParameterses(data: WaterParametersUpdateManyMutationInput!, where: WaterParametersWhereInput): BatchPayload!
  updateManyTankPosts(data: TankPostUpdateManyMutationInput!, where: TankPostWhereInput): BatchPayload!
  updateManyTankReplies(data: TankReplyUpdateManyMutationInput!, where: TankReplyWhereInput): BatchPayload!
  updateManyCorals(data: CoralUpdateManyMutationInput!, where: CoralWhereInput): BatchPayload!
  updateManyTankImages(data: TankImageUpdateManyMutationInput!, where: TankImageWhereInput): BatchPayload!
  updateManyFeeds(data: FeedUpdateManyMutationInput!, where: FeedWhereInput): BatchPayload!
  updateManyFeedComments(data: FeedCommentUpdateManyMutationInput!, where: FeedCommentWhereInput): BatchPayload!
  updateManyFeedCommentReplies(data: FeedCommentReplyUpdateManyMutationInput!, where: FeedCommentReplyWhereInput): BatchPayload!
  updateManyFeedImages(data: FeedImageUpdateManyMutationInput!, where: FeedImageWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  deleteManyProfilePictures(where: ProfilePictureWhereInput): BatchPayload!
  deleteManyProfiles(where: ProfileWhereInput): BatchPayload!
  deleteManyTanks(where: TankWhereInput): BatchPayload!
  deleteManyEquipments(where: EquipmentWhereInput): BatchPayload!
  deleteManyWaterParameterses(where: WaterParametersWhereInput): BatchPayload!
  deleteManyTankPosts(where: TankPostWhereInput): BatchPayload!
  deleteManyTankReplies(where: TankReplyWhereInput): BatchPayload!
  deleteManyCorals(where: CoralWhereInput): BatchPayload!
  deleteManyLikesTankReplies(where: LikesTankReplyWhereInput): BatchPayload!
  deleteManyLikesTankPosts(where: LikesTankPostWhereInput): BatchPayload!
  deleteManyLikesCorals(where: LikesCoralWhereInput): BatchPayload!
  deleteManyLikesTanks(where: LikesTankWhereInput): BatchPayload!
  deleteManyTankImages(where: TankImageWhereInput): BatchPayload!
  deleteManyFollowers(where: FollowerWhereInput): BatchPayload!
  deleteManyFollowings(where: FollowingWhereInput): BatchPayload!
  deleteManyFeeds(where: FeedWhereInput): BatchPayload!
  deleteManyLikesFeeds(where: LikesFeedWhereInput): BatchPayload!
  deleteManyFeedComments(where: FeedCommentWhereInput): BatchPayload!
  deleteManyLikesFeedComments(where: LikesFeedCommentWhereInput): BatchPayload!
  deleteManyFeedCommentReplies(where: FeedCommentReplyWhereInput): BatchPayload!
  deleteManyLikesFeedCommentReplies(where: LikesFeedCommentReplyWhereInput): BatchPayload!
  deleteManyFeedImages(where: FeedImageWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  executeRaw(database: PrismaDatabase, query: String!): Json!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

enum Permission {
  ADMIN
  USER
}

enum PrismaDatabase {
  default
}

type Profile implements Node {
  id: ID!
  author: User!
  corals(where: CoralWhereInput, orderBy: CoralOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Coral!]
  tanks(where: TankWhereInput, orderBy: TankOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tank!]
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type ProfileConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProfileEdge]!
  aggregate: AggregateProfile!
}

input ProfileCreateInput {
  author: UserCreateOneWithoutProfileInput!
  corals: CoralCreateManyWithoutProfileInput
  tanks: TankCreateManyWithoutProfileInput
}

input ProfileCreateOneWithoutAuthorInput {
  create: ProfileCreateWithoutAuthorInput
  connect: ProfileWhereUniqueInput
}

input ProfileCreateOneWithoutCoralsInput {
  create: ProfileCreateWithoutCoralsInput
  connect: ProfileWhereUniqueInput
}

input ProfileCreateOneWithoutTanksInput {
  create: ProfileCreateWithoutTanksInput
  connect: ProfileWhereUniqueInput
}

input ProfileCreateWithoutAuthorInput {
  corals: CoralCreateManyWithoutProfileInput
  tanks: TankCreateManyWithoutProfileInput
}

input ProfileCreateWithoutCoralsInput {
  author: UserCreateOneWithoutProfileInput!
  tanks: TankCreateManyWithoutProfileInput
}

input ProfileCreateWithoutTanksInput {
  author: UserCreateOneWithoutProfileInput!
  corals: CoralCreateManyWithoutProfileInput
}

"""An edge in a connection."""
type ProfileEdge {
  """The item at the end of the edge."""
  node: Profile!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProfileOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ProfilePicture implements Node {
  id: ID!
  user: User!
  picture: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type ProfilePictureConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProfilePictureEdge]!
  aggregate: AggregateProfilePicture!
}

input ProfilePictureCreateInput {
  picture: String!
  user: UserCreateOneWithoutProfilePictureInput!
}

input ProfilePictureCreateManyWithoutUserInput {
  create: [ProfilePictureCreateWithoutUserInput!]
  connect: [ProfilePictureWhereUniqueInput!]
}

input ProfilePictureCreateWithoutUserInput {
  picture: String!
}

"""An edge in a connection."""
type ProfilePictureEdge {
  """The item at the end of the edge."""
  node: ProfilePicture!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProfilePictureOrderByInput {
  id_ASC
  id_DESC
  picture_ASC
  picture_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProfilePicturePreviousValues {
  id: ID!
  picture: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ProfilePictureSubscriptionPayload {
  mutation: MutationType!
  node: ProfilePicture
  updatedFields: [String!]
  previousValues: ProfilePicturePreviousValues
}

input ProfilePictureSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProfilePictureSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProfilePictureSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProfilePictureSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProfilePictureWhereInput
}

input ProfilePictureUpdateInput {
  picture: String
  user: UserUpdateOneRequiredWithoutProfilePictureInput
}

input ProfilePictureUpdateManyMutationInput {
  picture: String
}

input ProfilePictureUpdateManyWithoutUserInput {
  create: [ProfilePictureCreateWithoutUserInput!]
  connect: [ProfilePictureWhereUniqueInput!]
  disconnect: [ProfilePictureWhereUniqueInput!]
  delete: [ProfilePictureWhereUniqueInput!]
  update: [ProfilePictureUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [ProfilePictureUpsertWithWhereUniqueWithoutUserInput!]
}

input ProfilePictureUpdateWithoutUserDataInput {
  picture: String
}

input ProfilePictureUpdateWithWhereUniqueWithoutUserInput {
  where: ProfilePictureWhereUniqueInput!
  data: ProfilePictureUpdateWithoutUserDataInput!
}

input ProfilePictureUpsertWithWhereUniqueWithoutUserInput {
  where: ProfilePictureWhereUniqueInput!
  update: ProfilePictureUpdateWithoutUserDataInput!
  create: ProfilePictureCreateWithoutUserInput!
}

input ProfilePictureWhereInput {
  """Logical AND on all given filters."""
  AND: [ProfilePictureWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProfilePictureWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProfilePictureWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  picture: String

  """All values that are not equal to given value."""
  picture_not: String

  """All values that are contained in given list."""
  picture_in: [String!]

  """All values that are not contained in given list."""
  picture_not_in: [String!]

  """All values less than the given value."""
  picture_lt: String

  """All values less than or equal the given value."""
  picture_lte: String

  """All values greater than the given value."""
  picture_gt: String

  """All values greater than or equal the given value."""
  picture_gte: String

  """All values containing the given string."""
  picture_contains: String

  """All values not containing the given string."""
  picture_not_contains: String

  """All values starting with the given string."""
  picture_starts_with: String

  """All values not starting with the given string."""
  picture_not_starts_with: String

  """All values ending with the given string."""
  picture_ends_with: String

  """All values not ending with the given string."""
  picture_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  user: UserWhereInput
}

input ProfilePictureWhereUniqueInput {
  id: ID
}

type ProfilePreviousValues {
  id: ID!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type ProfileSubscriptionPayload {
  mutation: MutationType!
  node: Profile
  updatedFields: [String!]
  previousValues: ProfilePreviousValues
}

input ProfileSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProfileSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProfileSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProfileSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProfileWhereInput
}

input ProfileUpdateInput {
  author: UserUpdateOneRequiredWithoutProfileInput
  corals: CoralUpdateManyWithoutProfileInput
  tanks: TankUpdateManyWithoutProfileInput
}

input ProfileUpdateOneRequiredWithoutCoralsInput {
  create: ProfileCreateWithoutCoralsInput
  connect: ProfileWhereUniqueInput
  update: ProfileUpdateWithoutCoralsDataInput
  upsert: ProfileUpsertWithoutCoralsInput
}

input ProfileUpdateOneRequiredWithoutTanksInput {
  create: ProfileCreateWithoutTanksInput
  connect: ProfileWhereUniqueInput
  update: ProfileUpdateWithoutTanksDataInput
  upsert: ProfileUpsertWithoutTanksInput
}

input ProfileUpdateOneWithoutAuthorInput {
  create: ProfileCreateWithoutAuthorInput
  connect: ProfileWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ProfileUpdateWithoutAuthorDataInput
  upsert: ProfileUpsertWithoutAuthorInput
}

input ProfileUpdateWithoutAuthorDataInput {
  corals: CoralUpdateManyWithoutProfileInput
  tanks: TankUpdateManyWithoutProfileInput
}

input ProfileUpdateWithoutCoralsDataInput {
  author: UserUpdateOneRequiredWithoutProfileInput
  tanks: TankUpdateManyWithoutProfileInput
}

input ProfileUpdateWithoutTanksDataInput {
  author: UserUpdateOneRequiredWithoutProfileInput
  corals: CoralUpdateManyWithoutProfileInput
}

input ProfileUpsertWithoutAuthorInput {
  update: ProfileUpdateWithoutAuthorDataInput!
  create: ProfileCreateWithoutAuthorInput!
}

input ProfileUpsertWithoutCoralsInput {
  update: ProfileUpdateWithoutCoralsDataInput!
  create: ProfileCreateWithoutCoralsInput!
}

input ProfileUpsertWithoutTanksInput {
  update: ProfileUpdateWithoutTanksDataInput!
  create: ProfileCreateWithoutTanksInput!
}

input ProfileWhereInput {
  """Logical AND on all given filters."""
  AND: [ProfileWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProfileWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProfileWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  author: UserWhereInput
  corals_every: CoralWhereInput
  corals_some: CoralWhereInput
  corals_none: CoralWhereInput
  tanks_every: TankWhereInput
  tanks_some: TankWhereInput
  tanks_none: TankWhereInput
}

input ProfileWhereUniqueInput {
  id: ID
}

type Query {
  profilePictures(where: ProfilePictureWhereInput, orderBy: ProfilePictureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProfilePicture]!
  profiles(where: ProfileWhereInput, orderBy: ProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Profile]!
  tanks(where: TankWhereInput, orderBy: TankOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tank]!
  equipments(where: EquipmentWhereInput, orderBy: EquipmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Equipment]!
  waterParameterses(where: WaterParametersWhereInput, orderBy: WaterParametersOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WaterParameters]!
  tankPosts(where: TankPostWhereInput, orderBy: TankPostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TankPost]!
  tankReplies(where: TankReplyWhereInput, orderBy: TankReplyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TankReply]!
  corals(where: CoralWhereInput, orderBy: CoralOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Coral]!
  likesTankReplies(where: LikesTankReplyWhereInput, orderBy: LikesTankReplyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LikesTankReply]!
  likesTankPosts(where: LikesTankPostWhereInput, orderBy: LikesTankPostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LikesTankPost]!
  likesCorals(where: LikesCoralWhereInput, orderBy: LikesCoralOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LikesCoral]!
  likesTanks(where: LikesTankWhereInput, orderBy: LikesTankOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LikesTank]!
  tankImages(where: TankImageWhereInput, orderBy: TankImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TankImage]!
  followers(where: FollowerWhereInput, orderBy: FollowerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Follower]!
  followings(where: FollowingWhereInput, orderBy: FollowingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Following]!
  feeds(where: FeedWhereInput, orderBy: FeedOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Feed]!
  likesFeeds(where: LikesFeedWhereInput, orderBy: LikesFeedOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LikesFeed]!
  feedComments(where: FeedCommentWhereInput, orderBy: FeedCommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FeedComment]!
  likesFeedComments(where: LikesFeedCommentWhereInput, orderBy: LikesFeedCommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LikesFeedComment]!
  feedCommentReplies(where: FeedCommentReplyWhereInput, orderBy: FeedCommentReplyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FeedCommentReply]!
  likesFeedCommentReplies(where: LikesFeedCommentReplyWhereInput, orderBy: LikesFeedCommentReplyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LikesFeedCommentReply]!
  feedImages(where: FeedImageWhereInput, orderBy: FeedImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FeedImage]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  profilePicture(where: ProfilePictureWhereUniqueInput!): ProfilePicture
  profile(where: ProfileWhereUniqueInput!): Profile
  tank(where: TankWhereUniqueInput!): Tank
  equipment(where: EquipmentWhereUniqueInput!): Equipment
  waterParameters(where: WaterParametersWhereUniqueInput!): WaterParameters
  tankPost(where: TankPostWhereUniqueInput!): TankPost
  tankReply(where: TankReplyWhereUniqueInput!): TankReply
  coral(where: CoralWhereUniqueInput!): Coral
  likesTankReply(where: LikesTankReplyWhereUniqueInput!): LikesTankReply
  likesTankPost(where: LikesTankPostWhereUniqueInput!): LikesTankPost
  likesCoral(where: LikesCoralWhereUniqueInput!): LikesCoral
  likesTank(where: LikesTankWhereUniqueInput!): LikesTank
  tankImage(where: TankImageWhereUniqueInput!): TankImage
  follower(where: FollowerWhereUniqueInput!): Follower
  following(where: FollowingWhereUniqueInput!): Following
  feed(where: FeedWhereUniqueInput!): Feed
  likesFeed(where: LikesFeedWhereUniqueInput!): LikesFeed
  feedComment(where: FeedCommentWhereUniqueInput!): FeedComment
  likesFeedComment(where: LikesFeedCommentWhereUniqueInput!): LikesFeedComment
  feedCommentReply(where: FeedCommentReplyWhereUniqueInput!): FeedCommentReply
  likesFeedCommentReply(where: LikesFeedCommentReplyWhereUniqueInput!): LikesFeedCommentReply
  feedImage(where: FeedImageWhereUniqueInput!): FeedImage
  user(where: UserWhereUniqueInput!): User
  profilePicturesConnection(where: ProfilePictureWhereInput, orderBy: ProfilePictureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProfilePictureConnection!
  profilesConnection(where: ProfileWhereInput, orderBy: ProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProfileConnection!
  tanksConnection(where: TankWhereInput, orderBy: TankOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TankConnection!
  equipmentsConnection(where: EquipmentWhereInput, orderBy: EquipmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EquipmentConnection!
  waterParametersesConnection(where: WaterParametersWhereInput, orderBy: WaterParametersOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WaterParametersConnection!
  tankPostsConnection(where: TankPostWhereInput, orderBy: TankPostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TankPostConnection!
  tankRepliesConnection(where: TankReplyWhereInput, orderBy: TankReplyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TankReplyConnection!
  coralsConnection(where: CoralWhereInput, orderBy: CoralOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CoralConnection!
  likesTankRepliesConnection(where: LikesTankReplyWhereInput, orderBy: LikesTankReplyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LikesTankReplyConnection!
  likesTankPostsConnection(where: LikesTankPostWhereInput, orderBy: LikesTankPostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LikesTankPostConnection!
  likesCoralsConnection(where: LikesCoralWhereInput, orderBy: LikesCoralOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LikesCoralConnection!
  likesTanksConnection(where: LikesTankWhereInput, orderBy: LikesTankOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LikesTankConnection!
  tankImagesConnection(where: TankImageWhereInput, orderBy: TankImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TankImageConnection!
  followersConnection(where: FollowerWhereInput, orderBy: FollowerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FollowerConnection!
  followingsConnection(where: FollowingWhereInput, orderBy: FollowingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FollowingConnection!
  feedsConnection(where: FeedWhereInput, orderBy: FeedOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FeedConnection!
  likesFeedsConnection(where: LikesFeedWhereInput, orderBy: LikesFeedOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LikesFeedConnection!
  feedCommentsConnection(where: FeedCommentWhereInput, orderBy: FeedCommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FeedCommentConnection!
  likesFeedCommentsConnection(where: LikesFeedCommentWhereInput, orderBy: LikesFeedCommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LikesFeedCommentConnection!
  feedCommentRepliesConnection(where: FeedCommentReplyWhereInput, orderBy: FeedCommentReplyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FeedCommentReplyConnection!
  likesFeedCommentRepliesConnection(where: LikesFeedCommentReplyWhereInput, orderBy: LikesFeedCommentReplyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LikesFeedCommentReplyConnection!
  feedImagesConnection(where: FeedImageWhereInput, orderBy: FeedImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FeedImageConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  profilePicture(where: ProfilePictureSubscriptionWhereInput): ProfilePictureSubscriptionPayload
  profile(where: ProfileSubscriptionWhereInput): ProfileSubscriptionPayload
  tank(where: TankSubscriptionWhereInput): TankSubscriptionPayload
  equipment(where: EquipmentSubscriptionWhereInput): EquipmentSubscriptionPayload
  waterParameters(where: WaterParametersSubscriptionWhereInput): WaterParametersSubscriptionPayload
  tankPost(where: TankPostSubscriptionWhereInput): TankPostSubscriptionPayload
  tankReply(where: TankReplySubscriptionWhereInput): TankReplySubscriptionPayload
  coral(where: CoralSubscriptionWhereInput): CoralSubscriptionPayload
  likesTankReply(where: LikesTankReplySubscriptionWhereInput): LikesTankReplySubscriptionPayload
  likesTankPost(where: LikesTankPostSubscriptionWhereInput): LikesTankPostSubscriptionPayload
  likesCoral(where: LikesCoralSubscriptionWhereInput): LikesCoralSubscriptionPayload
  likesTank(where: LikesTankSubscriptionWhereInput): LikesTankSubscriptionPayload
  tankImage(where: TankImageSubscriptionWhereInput): TankImageSubscriptionPayload
  follower(where: FollowerSubscriptionWhereInput): FollowerSubscriptionPayload
  following(where: FollowingSubscriptionWhereInput): FollowingSubscriptionPayload
  feed(where: FeedSubscriptionWhereInput): FeedSubscriptionPayload
  likesFeed(where: LikesFeedSubscriptionWhereInput): LikesFeedSubscriptionPayload
  feedComment(where: FeedCommentSubscriptionWhereInput): FeedCommentSubscriptionPayload
  likesFeedComment(where: LikesFeedCommentSubscriptionWhereInput): LikesFeedCommentSubscriptionPayload
  feedCommentReply(where: FeedCommentReplySubscriptionWhereInput): FeedCommentReplySubscriptionPayload
  likesFeedCommentReply(where: LikesFeedCommentReplySubscriptionWhereInput): LikesFeedCommentReplySubscriptionPayload
  feedImage(where: FeedImageSubscriptionWhereInput): FeedImageSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type Tank implements Node {
  id: ID!
  profile: Profile!
  title: String!
  equipement: Equipment
  parameters: WaterParameters
  posts(where: TankPostWhereInput, orderBy: TankPostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TankPost!]
  images(where: TankImageWhereInput, orderBy: TankImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TankImage!]
  likes(where: LikesTankWhereInput, orderBy: LikesTankOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LikesTank!]
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type TankConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TankEdge]!
  aggregate: AggregateTank!
}

input TankCreateInput {
  title: String!
  profile: ProfileCreateOneWithoutTanksInput!
  equipement: EquipmentCreateOneWithoutTankInput
  parameters: WaterParametersCreateOneWithoutTankInput
  posts: TankPostCreateManyWithoutTankInput
  images: TankImageCreateManyWithoutTankInput
  likes: LikesTankCreateManyWithoutTankInput
}

input TankCreateManyWithoutProfileInput {
  create: [TankCreateWithoutProfileInput!]
  connect: [TankWhereUniqueInput!]
}

input TankCreateOneWithoutEquipementInput {
  create: TankCreateWithoutEquipementInput
  connect: TankWhereUniqueInput
}

input TankCreateOneWithoutImagesInput {
  create: TankCreateWithoutImagesInput
  connect: TankWhereUniqueInput
}

input TankCreateOneWithoutLikesInput {
  create: TankCreateWithoutLikesInput
  connect: TankWhereUniqueInput
}

input TankCreateOneWithoutParametersInput {
  create: TankCreateWithoutParametersInput
  connect: TankWhereUniqueInput
}

input TankCreateOneWithoutPostsInput {
  create: TankCreateWithoutPostsInput
  connect: TankWhereUniqueInput
}

input TankCreateWithoutEquipementInput {
  title: String!
  profile: ProfileCreateOneWithoutTanksInput!
  parameters: WaterParametersCreateOneWithoutTankInput
  posts: TankPostCreateManyWithoutTankInput
  images: TankImageCreateManyWithoutTankInput
  likes: LikesTankCreateManyWithoutTankInput
}

input TankCreateWithoutImagesInput {
  title: String!
  profile: ProfileCreateOneWithoutTanksInput!
  equipement: EquipmentCreateOneWithoutTankInput
  parameters: WaterParametersCreateOneWithoutTankInput
  posts: TankPostCreateManyWithoutTankInput
  likes: LikesTankCreateManyWithoutTankInput
}

input TankCreateWithoutLikesInput {
  title: String!
  profile: ProfileCreateOneWithoutTanksInput!
  equipement: EquipmentCreateOneWithoutTankInput
  parameters: WaterParametersCreateOneWithoutTankInput
  posts: TankPostCreateManyWithoutTankInput
  images: TankImageCreateManyWithoutTankInput
}

input TankCreateWithoutParametersInput {
  title: String!
  profile: ProfileCreateOneWithoutTanksInput!
  equipement: EquipmentCreateOneWithoutTankInput
  posts: TankPostCreateManyWithoutTankInput
  images: TankImageCreateManyWithoutTankInput
  likes: LikesTankCreateManyWithoutTankInput
}

input TankCreateWithoutPostsInput {
  title: String!
  profile: ProfileCreateOneWithoutTanksInput!
  equipement: EquipmentCreateOneWithoutTankInput
  parameters: WaterParametersCreateOneWithoutTankInput
  images: TankImageCreateManyWithoutTankInput
  likes: LikesTankCreateManyWithoutTankInput
}

input TankCreateWithoutProfileInput {
  title: String!
  equipement: EquipmentCreateOneWithoutTankInput
  parameters: WaterParametersCreateOneWithoutTankInput
  posts: TankPostCreateManyWithoutTankInput
  images: TankImageCreateManyWithoutTankInput
  likes: LikesTankCreateManyWithoutTankInput
}

"""An edge in a connection."""
type TankEdge {
  """The item at the end of the edge."""
  node: Tank!

  """A cursor for use in pagination."""
  cursor: String!
}

type TankImage implements Node {
  id: ID!
  url: String!
  tank: Tank!
}

"""A connection to a list of items."""
type TankImageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TankImageEdge]!
  aggregate: AggregateTankImage!
}

input TankImageCreateInput {
  url: String!
  tank: TankCreateOneWithoutImagesInput!
}

input TankImageCreateManyWithoutTankInput {
  create: [TankImageCreateWithoutTankInput!]
  connect: [TankImageWhereUniqueInput!]
}

input TankImageCreateWithoutTankInput {
  url: String!
}

"""An edge in a connection."""
type TankImageEdge {
  """The item at the end of the edge."""
  node: TankImage!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TankImageOrderByInput {
  id_ASC
  id_DESC
  url_ASC
  url_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type TankImagePreviousValues {
  id: ID!
  url: String!
}

type TankImageSubscriptionPayload {
  mutation: MutationType!
  node: TankImage
  updatedFields: [String!]
  previousValues: TankImagePreviousValues
}

input TankImageSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TankImageSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TankImageSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TankImageSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TankImageWhereInput
}

input TankImageUpdateInput {
  url: String
  tank: TankUpdateOneRequiredWithoutImagesInput
}

input TankImageUpdateManyMutationInput {
  url: String
}

input TankImageUpdateManyWithoutTankInput {
  create: [TankImageCreateWithoutTankInput!]
  connect: [TankImageWhereUniqueInput!]
  disconnect: [TankImageWhereUniqueInput!]
  delete: [TankImageWhereUniqueInput!]
  update: [TankImageUpdateWithWhereUniqueWithoutTankInput!]
  upsert: [TankImageUpsertWithWhereUniqueWithoutTankInput!]
}

input TankImageUpdateWithoutTankDataInput {
  url: String
}

input TankImageUpdateWithWhereUniqueWithoutTankInput {
  where: TankImageWhereUniqueInput!
  data: TankImageUpdateWithoutTankDataInput!
}

input TankImageUpsertWithWhereUniqueWithoutTankInput {
  where: TankImageWhereUniqueInput!
  update: TankImageUpdateWithoutTankDataInput!
  create: TankImageCreateWithoutTankInput!
}

input TankImageWhereInput {
  """Logical AND on all given filters."""
  AND: [TankImageWhereInput!]

  """Logical OR on all given filters."""
  OR: [TankImageWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TankImageWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
  tank: TankWhereInput
}

input TankImageWhereUniqueInput {
  id: ID
}

enum TankOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type TankPost implements Node {
  id: ID!
  body: String!
  replies(where: TankReplyWhereInput, orderBy: TankReplyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TankReply!]
  author: User!
  tank: Tank!
  likes(where: LikesTankPostWhereInput, orderBy: LikesTankPostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LikesTankPost!]
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type TankPostConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TankPostEdge]!
  aggregate: AggregateTankPost!
}

input TankPostCreateInput {
  body: String!
  replies: TankReplyCreateManyWithoutPostInput
  author: UserCreateOneWithoutTankPostsInput!
  tank: TankCreateOneWithoutPostsInput!
  likes: LikesTankPostCreateManyWithoutPostInput
}

input TankPostCreateManyWithoutAuthorInput {
  create: [TankPostCreateWithoutAuthorInput!]
  connect: [TankPostWhereUniqueInput!]
}

input TankPostCreateManyWithoutTankInput {
  create: [TankPostCreateWithoutTankInput!]
  connect: [TankPostWhereUniqueInput!]
}

input TankPostCreateOneWithoutLikesInput {
  create: TankPostCreateWithoutLikesInput
  connect: TankPostWhereUniqueInput
}

input TankPostCreateOneWithoutRepliesInput {
  create: TankPostCreateWithoutRepliesInput
  connect: TankPostWhereUniqueInput
}

input TankPostCreateWithoutAuthorInput {
  body: String!
  replies: TankReplyCreateManyWithoutPostInput
  tank: TankCreateOneWithoutPostsInput!
  likes: LikesTankPostCreateManyWithoutPostInput
}

input TankPostCreateWithoutLikesInput {
  body: String!
  replies: TankReplyCreateManyWithoutPostInput
  author: UserCreateOneWithoutTankPostsInput!
  tank: TankCreateOneWithoutPostsInput!
}

input TankPostCreateWithoutRepliesInput {
  body: String!
  author: UserCreateOneWithoutTankPostsInput!
  tank: TankCreateOneWithoutPostsInput!
  likes: LikesTankPostCreateManyWithoutPostInput
}

input TankPostCreateWithoutTankInput {
  body: String!
  replies: TankReplyCreateManyWithoutPostInput
  author: UserCreateOneWithoutTankPostsInput!
  likes: LikesTankPostCreateManyWithoutPostInput
}

"""An edge in a connection."""
type TankPostEdge {
  """The item at the end of the edge."""
  node: TankPost!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TankPostOrderByInput {
  id_ASC
  id_DESC
  body_ASC
  body_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type TankPostPreviousValues {
  id: ID!
  body: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type TankPostSubscriptionPayload {
  mutation: MutationType!
  node: TankPost
  updatedFields: [String!]
  previousValues: TankPostPreviousValues
}

input TankPostSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TankPostSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TankPostSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TankPostSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TankPostWhereInput
}

input TankPostUpdateInput {
  body: String
  replies: TankReplyUpdateManyWithoutPostInput
  author: UserUpdateOneRequiredWithoutTankPostsInput
  tank: TankUpdateOneRequiredWithoutPostsInput
  likes: LikesTankPostUpdateManyWithoutPostInput
}

input TankPostUpdateManyMutationInput {
  body: String
}

input TankPostUpdateManyWithoutAuthorInput {
  create: [TankPostCreateWithoutAuthorInput!]
  connect: [TankPostWhereUniqueInput!]
  disconnect: [TankPostWhereUniqueInput!]
  delete: [TankPostWhereUniqueInput!]
  update: [TankPostUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [TankPostUpsertWithWhereUniqueWithoutAuthorInput!]
}

input TankPostUpdateManyWithoutTankInput {
  create: [TankPostCreateWithoutTankInput!]
  connect: [TankPostWhereUniqueInput!]
  disconnect: [TankPostWhereUniqueInput!]
  delete: [TankPostWhereUniqueInput!]
  update: [TankPostUpdateWithWhereUniqueWithoutTankInput!]
  upsert: [TankPostUpsertWithWhereUniqueWithoutTankInput!]
}

input TankPostUpdateOneRequiredWithoutLikesInput {
  create: TankPostCreateWithoutLikesInput
  connect: TankPostWhereUniqueInput
  update: TankPostUpdateWithoutLikesDataInput
  upsert: TankPostUpsertWithoutLikesInput
}

input TankPostUpdateOneRequiredWithoutRepliesInput {
  create: TankPostCreateWithoutRepliesInput
  connect: TankPostWhereUniqueInput
  update: TankPostUpdateWithoutRepliesDataInput
  upsert: TankPostUpsertWithoutRepliesInput
}

input TankPostUpdateWithoutAuthorDataInput {
  body: String
  replies: TankReplyUpdateManyWithoutPostInput
  tank: TankUpdateOneRequiredWithoutPostsInput
  likes: LikesTankPostUpdateManyWithoutPostInput
}

input TankPostUpdateWithoutLikesDataInput {
  body: String
  replies: TankReplyUpdateManyWithoutPostInput
  author: UserUpdateOneRequiredWithoutTankPostsInput
  tank: TankUpdateOneRequiredWithoutPostsInput
}

input TankPostUpdateWithoutRepliesDataInput {
  body: String
  author: UserUpdateOneRequiredWithoutTankPostsInput
  tank: TankUpdateOneRequiredWithoutPostsInput
  likes: LikesTankPostUpdateManyWithoutPostInput
}

input TankPostUpdateWithoutTankDataInput {
  body: String
  replies: TankReplyUpdateManyWithoutPostInput
  author: UserUpdateOneRequiredWithoutTankPostsInput
  likes: LikesTankPostUpdateManyWithoutPostInput
}

input TankPostUpdateWithWhereUniqueWithoutAuthorInput {
  where: TankPostWhereUniqueInput!
  data: TankPostUpdateWithoutAuthorDataInput!
}

input TankPostUpdateWithWhereUniqueWithoutTankInput {
  where: TankPostWhereUniqueInput!
  data: TankPostUpdateWithoutTankDataInput!
}

input TankPostUpsertWithoutLikesInput {
  update: TankPostUpdateWithoutLikesDataInput!
  create: TankPostCreateWithoutLikesInput!
}

input TankPostUpsertWithoutRepliesInput {
  update: TankPostUpdateWithoutRepliesDataInput!
  create: TankPostCreateWithoutRepliesInput!
}

input TankPostUpsertWithWhereUniqueWithoutAuthorInput {
  where: TankPostWhereUniqueInput!
  update: TankPostUpdateWithoutAuthorDataInput!
  create: TankPostCreateWithoutAuthorInput!
}

input TankPostUpsertWithWhereUniqueWithoutTankInput {
  where: TankPostWhereUniqueInput!
  update: TankPostUpdateWithoutTankDataInput!
  create: TankPostCreateWithoutTankInput!
}

input TankPostWhereInput {
  """Logical AND on all given filters."""
  AND: [TankPostWhereInput!]

  """Logical OR on all given filters."""
  OR: [TankPostWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TankPostWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  body: String

  """All values that are not equal to given value."""
  body_not: String

  """All values that are contained in given list."""
  body_in: [String!]

  """All values that are not contained in given list."""
  body_not_in: [String!]

  """All values less than the given value."""
  body_lt: String

  """All values less than or equal the given value."""
  body_lte: String

  """All values greater than the given value."""
  body_gt: String

  """All values greater than or equal the given value."""
  body_gte: String

  """All values containing the given string."""
  body_contains: String

  """All values not containing the given string."""
  body_not_contains: String

  """All values starting with the given string."""
  body_starts_with: String

  """All values not starting with the given string."""
  body_not_starts_with: String

  """All values ending with the given string."""
  body_ends_with: String

  """All values not ending with the given string."""
  body_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  replies_every: TankReplyWhereInput
  replies_some: TankReplyWhereInput
  replies_none: TankReplyWhereInput
  author: UserWhereInput
  tank: TankWhereInput
  likes_every: LikesTankPostWhereInput
  likes_some: LikesTankPostWhereInput
  likes_none: LikesTankPostWhereInput
}

input TankPostWhereUniqueInput {
  id: ID
}

type TankPreviousValues {
  id: ID!
  title: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type TankReply implements Node {
  id: ID!
  body: String!
  author: User!
  post: TankPost!
  likes(where: LikesTankReplyWhereInput, orderBy: LikesTankReplyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LikesTankReply!]
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type TankReplyConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TankReplyEdge]!
  aggregate: AggregateTankReply!
}

input TankReplyCreateInput {
  body: String!
  author: UserCreateOneWithoutTankRepliesInput!
  post: TankPostCreateOneWithoutRepliesInput!
  likes: LikesTankReplyCreateManyWithoutReplyInput
}

input TankReplyCreateManyWithoutAuthorInput {
  create: [TankReplyCreateWithoutAuthorInput!]
  connect: [TankReplyWhereUniqueInput!]
}

input TankReplyCreateManyWithoutPostInput {
  create: [TankReplyCreateWithoutPostInput!]
  connect: [TankReplyWhereUniqueInput!]
}

input TankReplyCreateOneWithoutLikesInput {
  create: TankReplyCreateWithoutLikesInput
  connect: TankReplyWhereUniqueInput
}

input TankReplyCreateWithoutAuthorInput {
  body: String!
  post: TankPostCreateOneWithoutRepliesInput!
  likes: LikesTankReplyCreateManyWithoutReplyInput
}

input TankReplyCreateWithoutLikesInput {
  body: String!
  author: UserCreateOneWithoutTankRepliesInput!
  post: TankPostCreateOneWithoutRepliesInput!
}

input TankReplyCreateWithoutPostInput {
  body: String!
  author: UserCreateOneWithoutTankRepliesInput!
  likes: LikesTankReplyCreateManyWithoutReplyInput
}

"""An edge in a connection."""
type TankReplyEdge {
  """The item at the end of the edge."""
  node: TankReply!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TankReplyOrderByInput {
  id_ASC
  id_DESC
  body_ASC
  body_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type TankReplyPreviousValues {
  id: ID!
  body: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type TankReplySubscriptionPayload {
  mutation: MutationType!
  node: TankReply
  updatedFields: [String!]
  previousValues: TankReplyPreviousValues
}

input TankReplySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TankReplySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TankReplySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TankReplySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TankReplyWhereInput
}

input TankReplyUpdateInput {
  body: String
  author: UserUpdateOneRequiredWithoutTankRepliesInput
  post: TankPostUpdateOneRequiredWithoutRepliesInput
  likes: LikesTankReplyUpdateManyWithoutReplyInput
}

input TankReplyUpdateManyMutationInput {
  body: String
}

input TankReplyUpdateManyWithoutAuthorInput {
  create: [TankReplyCreateWithoutAuthorInput!]
  connect: [TankReplyWhereUniqueInput!]
  disconnect: [TankReplyWhereUniqueInput!]
  delete: [TankReplyWhereUniqueInput!]
  update: [TankReplyUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [TankReplyUpsertWithWhereUniqueWithoutAuthorInput!]
}

input TankReplyUpdateManyWithoutPostInput {
  create: [TankReplyCreateWithoutPostInput!]
  connect: [TankReplyWhereUniqueInput!]
  disconnect: [TankReplyWhereUniqueInput!]
  delete: [TankReplyWhereUniqueInput!]
  update: [TankReplyUpdateWithWhereUniqueWithoutPostInput!]
  upsert: [TankReplyUpsertWithWhereUniqueWithoutPostInput!]
}

input TankReplyUpdateOneRequiredWithoutLikesInput {
  create: TankReplyCreateWithoutLikesInput
  connect: TankReplyWhereUniqueInput
  update: TankReplyUpdateWithoutLikesDataInput
  upsert: TankReplyUpsertWithoutLikesInput
}

input TankReplyUpdateWithoutAuthorDataInput {
  body: String
  post: TankPostUpdateOneRequiredWithoutRepliesInput
  likes: LikesTankReplyUpdateManyWithoutReplyInput
}

input TankReplyUpdateWithoutLikesDataInput {
  body: String
  author: UserUpdateOneRequiredWithoutTankRepliesInput
  post: TankPostUpdateOneRequiredWithoutRepliesInput
}

input TankReplyUpdateWithoutPostDataInput {
  body: String
  author: UserUpdateOneRequiredWithoutTankRepliesInput
  likes: LikesTankReplyUpdateManyWithoutReplyInput
}

input TankReplyUpdateWithWhereUniqueWithoutAuthorInput {
  where: TankReplyWhereUniqueInput!
  data: TankReplyUpdateWithoutAuthorDataInput!
}

input TankReplyUpdateWithWhereUniqueWithoutPostInput {
  where: TankReplyWhereUniqueInput!
  data: TankReplyUpdateWithoutPostDataInput!
}

input TankReplyUpsertWithoutLikesInput {
  update: TankReplyUpdateWithoutLikesDataInput!
  create: TankReplyCreateWithoutLikesInput!
}

input TankReplyUpsertWithWhereUniqueWithoutAuthorInput {
  where: TankReplyWhereUniqueInput!
  update: TankReplyUpdateWithoutAuthorDataInput!
  create: TankReplyCreateWithoutAuthorInput!
}

input TankReplyUpsertWithWhereUniqueWithoutPostInput {
  where: TankReplyWhereUniqueInput!
  update: TankReplyUpdateWithoutPostDataInput!
  create: TankReplyCreateWithoutPostInput!
}

input TankReplyWhereInput {
  """Logical AND on all given filters."""
  AND: [TankReplyWhereInput!]

  """Logical OR on all given filters."""
  OR: [TankReplyWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TankReplyWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  body: String

  """All values that are not equal to given value."""
  body_not: String

  """All values that are contained in given list."""
  body_in: [String!]

  """All values that are not contained in given list."""
  body_not_in: [String!]

  """All values less than the given value."""
  body_lt: String

  """All values less than or equal the given value."""
  body_lte: String

  """All values greater than the given value."""
  body_gt: String

  """All values greater than or equal the given value."""
  body_gte: String

  """All values containing the given string."""
  body_contains: String

  """All values not containing the given string."""
  body_not_contains: String

  """All values starting with the given string."""
  body_starts_with: String

  """All values not starting with the given string."""
  body_not_starts_with: String

  """All values ending with the given string."""
  body_ends_with: String

  """All values not ending with the given string."""
  body_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  author: UserWhereInput
  post: TankPostWhereInput
  likes_every: LikesTankReplyWhereInput
  likes_some: LikesTankReplyWhereInput
  likes_none: LikesTankReplyWhereInput
}

input TankReplyWhereUniqueInput {
  id: ID
}

type TankSubscriptionPayload {
  mutation: MutationType!
  node: Tank
  updatedFields: [String!]
  previousValues: TankPreviousValues
}

input TankSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TankSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TankSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TankSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TankWhereInput
}

input TankUpdateInput {
  title: String
  profile: ProfileUpdateOneRequiredWithoutTanksInput
  equipement: EquipmentUpdateOneWithoutTankInput
  parameters: WaterParametersUpdateOneWithoutTankInput
  posts: TankPostUpdateManyWithoutTankInput
  images: TankImageUpdateManyWithoutTankInput
  likes: LikesTankUpdateManyWithoutTankInput
}

input TankUpdateManyMutationInput {
  title: String
}

input TankUpdateManyWithoutProfileInput {
  create: [TankCreateWithoutProfileInput!]
  connect: [TankWhereUniqueInput!]
  disconnect: [TankWhereUniqueInput!]
  delete: [TankWhereUniqueInput!]
  update: [TankUpdateWithWhereUniqueWithoutProfileInput!]
  upsert: [TankUpsertWithWhereUniqueWithoutProfileInput!]
}

input TankUpdateOneRequiredWithoutEquipementInput {
  create: TankCreateWithoutEquipementInput
  connect: TankWhereUniqueInput
  update: TankUpdateWithoutEquipementDataInput
  upsert: TankUpsertWithoutEquipementInput
}

input TankUpdateOneRequiredWithoutImagesInput {
  create: TankCreateWithoutImagesInput
  connect: TankWhereUniqueInput
  update: TankUpdateWithoutImagesDataInput
  upsert: TankUpsertWithoutImagesInput
}

input TankUpdateOneRequiredWithoutLikesInput {
  create: TankCreateWithoutLikesInput
  connect: TankWhereUniqueInput
  update: TankUpdateWithoutLikesDataInput
  upsert: TankUpsertWithoutLikesInput
}

input TankUpdateOneRequiredWithoutParametersInput {
  create: TankCreateWithoutParametersInput
  connect: TankWhereUniqueInput
  update: TankUpdateWithoutParametersDataInput
  upsert: TankUpsertWithoutParametersInput
}

input TankUpdateOneRequiredWithoutPostsInput {
  create: TankCreateWithoutPostsInput
  connect: TankWhereUniqueInput
  update: TankUpdateWithoutPostsDataInput
  upsert: TankUpsertWithoutPostsInput
}

input TankUpdateWithoutEquipementDataInput {
  title: String
  profile: ProfileUpdateOneRequiredWithoutTanksInput
  parameters: WaterParametersUpdateOneWithoutTankInput
  posts: TankPostUpdateManyWithoutTankInput
  images: TankImageUpdateManyWithoutTankInput
  likes: LikesTankUpdateManyWithoutTankInput
}

input TankUpdateWithoutImagesDataInput {
  title: String
  profile: ProfileUpdateOneRequiredWithoutTanksInput
  equipement: EquipmentUpdateOneWithoutTankInput
  parameters: WaterParametersUpdateOneWithoutTankInput
  posts: TankPostUpdateManyWithoutTankInput
  likes: LikesTankUpdateManyWithoutTankInput
}

input TankUpdateWithoutLikesDataInput {
  title: String
  profile: ProfileUpdateOneRequiredWithoutTanksInput
  equipement: EquipmentUpdateOneWithoutTankInput
  parameters: WaterParametersUpdateOneWithoutTankInput
  posts: TankPostUpdateManyWithoutTankInput
  images: TankImageUpdateManyWithoutTankInput
}

input TankUpdateWithoutParametersDataInput {
  title: String
  profile: ProfileUpdateOneRequiredWithoutTanksInput
  equipement: EquipmentUpdateOneWithoutTankInput
  posts: TankPostUpdateManyWithoutTankInput
  images: TankImageUpdateManyWithoutTankInput
  likes: LikesTankUpdateManyWithoutTankInput
}

input TankUpdateWithoutPostsDataInput {
  title: String
  profile: ProfileUpdateOneRequiredWithoutTanksInput
  equipement: EquipmentUpdateOneWithoutTankInput
  parameters: WaterParametersUpdateOneWithoutTankInput
  images: TankImageUpdateManyWithoutTankInput
  likes: LikesTankUpdateManyWithoutTankInput
}

input TankUpdateWithoutProfileDataInput {
  title: String
  equipement: EquipmentUpdateOneWithoutTankInput
  parameters: WaterParametersUpdateOneWithoutTankInput
  posts: TankPostUpdateManyWithoutTankInput
  images: TankImageUpdateManyWithoutTankInput
  likes: LikesTankUpdateManyWithoutTankInput
}

input TankUpdateWithWhereUniqueWithoutProfileInput {
  where: TankWhereUniqueInput!
  data: TankUpdateWithoutProfileDataInput!
}

input TankUpsertWithoutEquipementInput {
  update: TankUpdateWithoutEquipementDataInput!
  create: TankCreateWithoutEquipementInput!
}

input TankUpsertWithoutImagesInput {
  update: TankUpdateWithoutImagesDataInput!
  create: TankCreateWithoutImagesInput!
}

input TankUpsertWithoutLikesInput {
  update: TankUpdateWithoutLikesDataInput!
  create: TankCreateWithoutLikesInput!
}

input TankUpsertWithoutParametersInput {
  update: TankUpdateWithoutParametersDataInput!
  create: TankCreateWithoutParametersInput!
}

input TankUpsertWithoutPostsInput {
  update: TankUpdateWithoutPostsDataInput!
  create: TankCreateWithoutPostsInput!
}

input TankUpsertWithWhereUniqueWithoutProfileInput {
  where: TankWhereUniqueInput!
  update: TankUpdateWithoutProfileDataInput!
  create: TankCreateWithoutProfileInput!
}

input TankWhereInput {
  """Logical AND on all given filters."""
  AND: [TankWhereInput!]

  """Logical OR on all given filters."""
  OR: [TankWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TankWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  profile: ProfileWhereInput
  equipement: EquipmentWhereInput
  parameters: WaterParametersWhereInput
  posts_every: TankPostWhereInput
  posts_some: TankPostWhereInput
  posts_none: TankPostWhereInput
  images_every: TankImageWhereInput
  images_some: TankImageWhereInput
  images_none: TankImageWhereInput
  likes_every: LikesTankWhereInput
  likes_some: LikesTankWhereInput
  likes_none: LikesTankWhereInput
}

input TankWhereUniqueInput {
  id: ID
}

type User implements Node {
  id: ID!
  name: String!
  email: String!
  password: String!
  profilePicture(where: ProfilePictureWhereInput, orderBy: ProfilePictureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProfilePicture!]
  resetToken: String
  resetTokenExpiry: String
  permission: Permission
  followings(where: FollowingWhereInput, orderBy: FollowingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Following!]
  followers(where: FollowerWhereInput, orderBy: FollowerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Follower!]
  profile: Profile
  tankPosts(where: TankPostWhereInput, orderBy: TankPostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TankPost!]
  tankReplies(where: TankReplyWhereInput, orderBy: TankReplyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TankReply!]
  createdAt: DateTime!
  updatedAt: DateTime!
  feed(where: FeedWhereInput, orderBy: FeedOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Feed!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: String
  permission: Permission
  profilePicture: ProfilePictureCreateManyWithoutUserInput
  followings: FollowingCreateManyWithoutUserInput
  followers: FollowerCreateManyWithoutUserInput
  profile: ProfileCreateOneWithoutAuthorInput
  tankPosts: TankPostCreateManyWithoutAuthorInput
  tankReplies: TankReplyCreateManyWithoutAuthorInput
  feed: FeedCreateManyWithoutAuthorInput
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutFeedInput {
  create: UserCreateWithoutFeedInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutFollowersInput {
  create: UserCreateWithoutFollowersInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutFollowingsInput {
  create: UserCreateWithoutFollowingsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutProfileInput {
  create: UserCreateWithoutProfileInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutProfilePictureInput {
  create: UserCreateWithoutProfilePictureInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutTankPostsInput {
  create: UserCreateWithoutTankPostsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutTankRepliesInput {
  create: UserCreateWithoutTankRepliesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutFeedInput {
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: String
  permission: Permission
  profilePicture: ProfilePictureCreateManyWithoutUserInput
  followings: FollowingCreateManyWithoutUserInput
  followers: FollowerCreateManyWithoutUserInput
  profile: ProfileCreateOneWithoutAuthorInput
  tankPosts: TankPostCreateManyWithoutAuthorInput
  tankReplies: TankReplyCreateManyWithoutAuthorInput
}

input UserCreateWithoutFollowersInput {
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: String
  permission: Permission
  profilePicture: ProfilePictureCreateManyWithoutUserInput
  followings: FollowingCreateManyWithoutUserInput
  profile: ProfileCreateOneWithoutAuthorInput
  tankPosts: TankPostCreateManyWithoutAuthorInput
  tankReplies: TankReplyCreateManyWithoutAuthorInput
  feed: FeedCreateManyWithoutAuthorInput
}

input UserCreateWithoutFollowingsInput {
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: String
  permission: Permission
  profilePicture: ProfilePictureCreateManyWithoutUserInput
  followers: FollowerCreateManyWithoutUserInput
  profile: ProfileCreateOneWithoutAuthorInput
  tankPosts: TankPostCreateManyWithoutAuthorInput
  tankReplies: TankReplyCreateManyWithoutAuthorInput
  feed: FeedCreateManyWithoutAuthorInput
}

input UserCreateWithoutProfileInput {
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: String
  permission: Permission
  profilePicture: ProfilePictureCreateManyWithoutUserInput
  followings: FollowingCreateManyWithoutUserInput
  followers: FollowerCreateManyWithoutUserInput
  tankPosts: TankPostCreateManyWithoutAuthorInput
  tankReplies: TankReplyCreateManyWithoutAuthorInput
  feed: FeedCreateManyWithoutAuthorInput
}

input UserCreateWithoutProfilePictureInput {
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: String
  permission: Permission
  followings: FollowingCreateManyWithoutUserInput
  followers: FollowerCreateManyWithoutUserInput
  profile: ProfileCreateOneWithoutAuthorInput
  tankPosts: TankPostCreateManyWithoutAuthorInput
  tankReplies: TankReplyCreateManyWithoutAuthorInput
  feed: FeedCreateManyWithoutAuthorInput
}

input UserCreateWithoutTankPostsInput {
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: String
  permission: Permission
  profilePicture: ProfilePictureCreateManyWithoutUserInput
  followings: FollowingCreateManyWithoutUserInput
  followers: FollowerCreateManyWithoutUserInput
  profile: ProfileCreateOneWithoutAuthorInput
  tankReplies: TankReplyCreateManyWithoutAuthorInput
  feed: FeedCreateManyWithoutAuthorInput
}

input UserCreateWithoutTankRepliesInput {
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: String
  permission: Permission
  profilePicture: ProfilePictureCreateManyWithoutUserInput
  followings: FollowingCreateManyWithoutUserInput
  followers: FollowerCreateManyWithoutUserInput
  profile: ProfileCreateOneWithoutAuthorInput
  tankPosts: TankPostCreateManyWithoutAuthorInput
  feed: FeedCreateManyWithoutAuthorInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  resetToken_ASC
  resetToken_DESC
  resetTokenExpiry_ASC
  resetTokenExpiry_DESC
  permission_ASC
  permission_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: String
  permission: Permission
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: String
  permission: Permission
  profilePicture: ProfilePictureUpdateManyWithoutUserInput
  followings: FollowingUpdateManyWithoutUserInput
  followers: FollowerUpdateManyWithoutUserInput
  profile: ProfileUpdateOneWithoutAuthorInput
  tankPosts: TankPostUpdateManyWithoutAuthorInput
  tankReplies: TankReplyUpdateManyWithoutAuthorInput
  feed: FeedUpdateManyWithoutAuthorInput
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: String
  permission: Permission
  profilePicture: ProfilePictureUpdateManyWithoutUserInput
  followings: FollowingUpdateManyWithoutUserInput
  followers: FollowerUpdateManyWithoutUserInput
  profile: ProfileUpdateOneWithoutAuthorInput
  tankPosts: TankPostUpdateManyWithoutAuthorInput
  tankReplies: TankReplyUpdateManyWithoutAuthorInput
  feed: FeedUpdateManyWithoutAuthorInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: String
  permission: Permission
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneRequiredWithoutFeedInput {
  create: UserCreateWithoutFeedInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutFeedDataInput
  upsert: UserUpsertWithoutFeedInput
}

input UserUpdateOneRequiredWithoutFollowersInput {
  create: UserCreateWithoutFollowersInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutFollowersDataInput
  upsert: UserUpsertWithoutFollowersInput
}

input UserUpdateOneRequiredWithoutFollowingsInput {
  create: UserCreateWithoutFollowingsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutFollowingsDataInput
  upsert: UserUpsertWithoutFollowingsInput
}

input UserUpdateOneRequiredWithoutProfileInput {
  create: UserCreateWithoutProfileInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutProfileDataInput
  upsert: UserUpsertWithoutProfileInput
}

input UserUpdateOneRequiredWithoutProfilePictureInput {
  create: UserCreateWithoutProfilePictureInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutProfilePictureDataInput
  upsert: UserUpsertWithoutProfilePictureInput
}

input UserUpdateOneRequiredWithoutTankPostsInput {
  create: UserCreateWithoutTankPostsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutTankPostsDataInput
  upsert: UserUpsertWithoutTankPostsInput
}

input UserUpdateOneRequiredWithoutTankRepliesInput {
  create: UserCreateWithoutTankRepliesInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutTankRepliesDataInput
  upsert: UserUpsertWithoutTankRepliesInput
}

input UserUpdateWithoutFeedDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: String
  permission: Permission
  profilePicture: ProfilePictureUpdateManyWithoutUserInput
  followings: FollowingUpdateManyWithoutUserInput
  followers: FollowerUpdateManyWithoutUserInput
  profile: ProfileUpdateOneWithoutAuthorInput
  tankPosts: TankPostUpdateManyWithoutAuthorInput
  tankReplies: TankReplyUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutFollowersDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: String
  permission: Permission
  profilePicture: ProfilePictureUpdateManyWithoutUserInput
  followings: FollowingUpdateManyWithoutUserInput
  profile: ProfileUpdateOneWithoutAuthorInput
  tankPosts: TankPostUpdateManyWithoutAuthorInput
  tankReplies: TankReplyUpdateManyWithoutAuthorInput
  feed: FeedUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutFollowingsDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: String
  permission: Permission
  profilePicture: ProfilePictureUpdateManyWithoutUserInput
  followers: FollowerUpdateManyWithoutUserInput
  profile: ProfileUpdateOneWithoutAuthorInput
  tankPosts: TankPostUpdateManyWithoutAuthorInput
  tankReplies: TankReplyUpdateManyWithoutAuthorInput
  feed: FeedUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutProfileDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: String
  permission: Permission
  profilePicture: ProfilePictureUpdateManyWithoutUserInput
  followings: FollowingUpdateManyWithoutUserInput
  followers: FollowerUpdateManyWithoutUserInput
  tankPosts: TankPostUpdateManyWithoutAuthorInput
  tankReplies: TankReplyUpdateManyWithoutAuthorInput
  feed: FeedUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutProfilePictureDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: String
  permission: Permission
  followings: FollowingUpdateManyWithoutUserInput
  followers: FollowerUpdateManyWithoutUserInput
  profile: ProfileUpdateOneWithoutAuthorInput
  tankPosts: TankPostUpdateManyWithoutAuthorInput
  tankReplies: TankReplyUpdateManyWithoutAuthorInput
  feed: FeedUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutTankPostsDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: String
  permission: Permission
  profilePicture: ProfilePictureUpdateManyWithoutUserInput
  followings: FollowingUpdateManyWithoutUserInput
  followers: FollowerUpdateManyWithoutUserInput
  profile: ProfileUpdateOneWithoutAuthorInput
  tankReplies: TankReplyUpdateManyWithoutAuthorInput
  feed: FeedUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutTankRepliesDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: String
  permission: Permission
  profilePicture: ProfilePictureUpdateManyWithoutUserInput
  followings: FollowingUpdateManyWithoutUserInput
  followers: FollowerUpdateManyWithoutUserInput
  profile: ProfileUpdateOneWithoutAuthorInput
  tankPosts: TankPostUpdateManyWithoutAuthorInput
  feed: FeedUpdateManyWithoutAuthorInput
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutFeedInput {
  update: UserUpdateWithoutFeedDataInput!
  create: UserCreateWithoutFeedInput!
}

input UserUpsertWithoutFollowersInput {
  update: UserUpdateWithoutFollowersDataInput!
  create: UserCreateWithoutFollowersInput!
}

input UserUpsertWithoutFollowingsInput {
  update: UserUpdateWithoutFollowingsDataInput!
  create: UserCreateWithoutFollowingsInput!
}

input UserUpsertWithoutProfileInput {
  update: UserUpdateWithoutProfileDataInput!
  create: UserCreateWithoutProfileInput!
}

input UserUpsertWithoutProfilePictureInput {
  update: UserUpdateWithoutProfilePictureDataInput!
  create: UserCreateWithoutProfilePictureInput!
}

input UserUpsertWithoutTankPostsInput {
  update: UserUpdateWithoutTankPostsDataInput!
  create: UserCreateWithoutTankPostsInput!
}

input UserUpsertWithoutTankRepliesInput {
  update: UserUpdateWithoutTankRepliesDataInput!
  create: UserCreateWithoutTankRepliesInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  resetToken: String

  """All values that are not equal to given value."""
  resetToken_not: String

  """All values that are contained in given list."""
  resetToken_in: [String!]

  """All values that are not contained in given list."""
  resetToken_not_in: [String!]

  """All values less than the given value."""
  resetToken_lt: String

  """All values less than or equal the given value."""
  resetToken_lte: String

  """All values greater than the given value."""
  resetToken_gt: String

  """All values greater than or equal the given value."""
  resetToken_gte: String

  """All values containing the given string."""
  resetToken_contains: String

  """All values not containing the given string."""
  resetToken_not_contains: String

  """All values starting with the given string."""
  resetToken_starts_with: String

  """All values not starting with the given string."""
  resetToken_not_starts_with: String

  """All values ending with the given string."""
  resetToken_ends_with: String

  """All values not ending with the given string."""
  resetToken_not_ends_with: String
  resetTokenExpiry: String

  """All values that are not equal to given value."""
  resetTokenExpiry_not: String

  """All values that are contained in given list."""
  resetTokenExpiry_in: [String!]

  """All values that are not contained in given list."""
  resetTokenExpiry_not_in: [String!]

  """All values less than the given value."""
  resetTokenExpiry_lt: String

  """All values less than or equal the given value."""
  resetTokenExpiry_lte: String

  """All values greater than the given value."""
  resetTokenExpiry_gt: String

  """All values greater than or equal the given value."""
  resetTokenExpiry_gte: String

  """All values containing the given string."""
  resetTokenExpiry_contains: String

  """All values not containing the given string."""
  resetTokenExpiry_not_contains: String

  """All values starting with the given string."""
  resetTokenExpiry_starts_with: String

  """All values not starting with the given string."""
  resetTokenExpiry_not_starts_with: String

  """All values ending with the given string."""
  resetTokenExpiry_ends_with: String

  """All values not ending with the given string."""
  resetTokenExpiry_not_ends_with: String
  permission: Permission

  """All values that are not equal to given value."""
  permission_not: Permission

  """All values that are contained in given list."""
  permission_in: [Permission!]

  """All values that are not contained in given list."""
  permission_not_in: [Permission!]
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  profilePicture_every: ProfilePictureWhereInput
  profilePicture_some: ProfilePictureWhereInput
  profilePicture_none: ProfilePictureWhereInput
  followings_every: FollowingWhereInput
  followings_some: FollowingWhereInput
  followings_none: FollowingWhereInput
  followers_every: FollowerWhereInput
  followers_some: FollowerWhereInput
  followers_none: FollowerWhereInput
  profile: ProfileWhereInput
  tankPosts_every: TankPostWhereInput
  tankPosts_some: TankPostWhereInput
  tankPosts_none: TankPostWhereInput
  tankReplies_every: TankReplyWhereInput
  tankReplies_some: TankReplyWhereInput
  tankReplies_none: TankReplyWhereInput
  feed_every: FeedWhereInput
  feed_some: FeedWhereInput
  feed_none: FeedWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

type WaterParameters implements Node {
  id: ID!
  tank: Tank!
  temp: String!
  ph: String!
  kh: String!
  sal: String!
  cal: String!
  iodine: String!
  nitrate: String!
  phosphate: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type WaterParametersConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WaterParametersEdge]!
  aggregate: AggregateWaterParameters!
}

input WaterParametersCreateInput {
  temp: String!
  ph: String!
  kh: String!
  sal: String!
  cal: String!
  iodine: String!
  nitrate: String!
  phosphate: String!
  tank: TankCreateOneWithoutParametersInput!
}

input WaterParametersCreateOneWithoutTankInput {
  create: WaterParametersCreateWithoutTankInput
  connect: WaterParametersWhereUniqueInput
}

input WaterParametersCreateWithoutTankInput {
  temp: String!
  ph: String!
  kh: String!
  sal: String!
  cal: String!
  iodine: String!
  nitrate: String!
  phosphate: String!
}

"""An edge in a connection."""
type WaterParametersEdge {
  """The item at the end of the edge."""
  node: WaterParameters!

  """A cursor for use in pagination."""
  cursor: String!
}

enum WaterParametersOrderByInput {
  id_ASC
  id_DESC
  temp_ASC
  temp_DESC
  ph_ASC
  ph_DESC
  kh_ASC
  kh_DESC
  sal_ASC
  sal_DESC
  cal_ASC
  cal_DESC
  iodine_ASC
  iodine_DESC
  nitrate_ASC
  nitrate_DESC
  phosphate_ASC
  phosphate_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type WaterParametersPreviousValues {
  id: ID!
  temp: String!
  ph: String!
  kh: String!
  sal: String!
  cal: String!
  iodine: String!
  nitrate: String!
  phosphate: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type WaterParametersSubscriptionPayload {
  mutation: MutationType!
  node: WaterParameters
  updatedFields: [String!]
  previousValues: WaterParametersPreviousValues
}

input WaterParametersSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [WaterParametersSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [WaterParametersSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WaterParametersSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: WaterParametersWhereInput
}

input WaterParametersUpdateInput {
  temp: String
  ph: String
  kh: String
  sal: String
  cal: String
  iodine: String
  nitrate: String
  phosphate: String
  tank: TankUpdateOneRequiredWithoutParametersInput
}

input WaterParametersUpdateManyMutationInput {
  temp: String
  ph: String
  kh: String
  sal: String
  cal: String
  iodine: String
  nitrate: String
  phosphate: String
}

input WaterParametersUpdateOneWithoutTankInput {
  create: WaterParametersCreateWithoutTankInput
  connect: WaterParametersWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: WaterParametersUpdateWithoutTankDataInput
  upsert: WaterParametersUpsertWithoutTankInput
}

input WaterParametersUpdateWithoutTankDataInput {
  temp: String
  ph: String
  kh: String
  sal: String
  cal: String
  iodine: String
  nitrate: String
  phosphate: String
}

input WaterParametersUpsertWithoutTankInput {
  update: WaterParametersUpdateWithoutTankDataInput!
  create: WaterParametersCreateWithoutTankInput!
}

input WaterParametersWhereInput {
  """Logical AND on all given filters."""
  AND: [WaterParametersWhereInput!]

  """Logical OR on all given filters."""
  OR: [WaterParametersWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WaterParametersWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  temp: String

  """All values that are not equal to given value."""
  temp_not: String

  """All values that are contained in given list."""
  temp_in: [String!]

  """All values that are not contained in given list."""
  temp_not_in: [String!]

  """All values less than the given value."""
  temp_lt: String

  """All values less than or equal the given value."""
  temp_lte: String

  """All values greater than the given value."""
  temp_gt: String

  """All values greater than or equal the given value."""
  temp_gte: String

  """All values containing the given string."""
  temp_contains: String

  """All values not containing the given string."""
  temp_not_contains: String

  """All values starting with the given string."""
  temp_starts_with: String

  """All values not starting with the given string."""
  temp_not_starts_with: String

  """All values ending with the given string."""
  temp_ends_with: String

  """All values not ending with the given string."""
  temp_not_ends_with: String
  ph: String

  """All values that are not equal to given value."""
  ph_not: String

  """All values that are contained in given list."""
  ph_in: [String!]

  """All values that are not contained in given list."""
  ph_not_in: [String!]

  """All values less than the given value."""
  ph_lt: String

  """All values less than or equal the given value."""
  ph_lte: String

  """All values greater than the given value."""
  ph_gt: String

  """All values greater than or equal the given value."""
  ph_gte: String

  """All values containing the given string."""
  ph_contains: String

  """All values not containing the given string."""
  ph_not_contains: String

  """All values starting with the given string."""
  ph_starts_with: String

  """All values not starting with the given string."""
  ph_not_starts_with: String

  """All values ending with the given string."""
  ph_ends_with: String

  """All values not ending with the given string."""
  ph_not_ends_with: String
  kh: String

  """All values that are not equal to given value."""
  kh_not: String

  """All values that are contained in given list."""
  kh_in: [String!]

  """All values that are not contained in given list."""
  kh_not_in: [String!]

  """All values less than the given value."""
  kh_lt: String

  """All values less than or equal the given value."""
  kh_lte: String

  """All values greater than the given value."""
  kh_gt: String

  """All values greater than or equal the given value."""
  kh_gte: String

  """All values containing the given string."""
  kh_contains: String

  """All values not containing the given string."""
  kh_not_contains: String

  """All values starting with the given string."""
  kh_starts_with: String

  """All values not starting with the given string."""
  kh_not_starts_with: String

  """All values ending with the given string."""
  kh_ends_with: String

  """All values not ending with the given string."""
  kh_not_ends_with: String
  sal: String

  """All values that are not equal to given value."""
  sal_not: String

  """All values that are contained in given list."""
  sal_in: [String!]

  """All values that are not contained in given list."""
  sal_not_in: [String!]

  """All values less than the given value."""
  sal_lt: String

  """All values less than or equal the given value."""
  sal_lte: String

  """All values greater than the given value."""
  sal_gt: String

  """All values greater than or equal the given value."""
  sal_gte: String

  """All values containing the given string."""
  sal_contains: String

  """All values not containing the given string."""
  sal_not_contains: String

  """All values starting with the given string."""
  sal_starts_with: String

  """All values not starting with the given string."""
  sal_not_starts_with: String

  """All values ending with the given string."""
  sal_ends_with: String

  """All values not ending with the given string."""
  sal_not_ends_with: String
  cal: String

  """All values that are not equal to given value."""
  cal_not: String

  """All values that are contained in given list."""
  cal_in: [String!]

  """All values that are not contained in given list."""
  cal_not_in: [String!]

  """All values less than the given value."""
  cal_lt: String

  """All values less than or equal the given value."""
  cal_lte: String

  """All values greater than the given value."""
  cal_gt: String

  """All values greater than or equal the given value."""
  cal_gte: String

  """All values containing the given string."""
  cal_contains: String

  """All values not containing the given string."""
  cal_not_contains: String

  """All values starting with the given string."""
  cal_starts_with: String

  """All values not starting with the given string."""
  cal_not_starts_with: String

  """All values ending with the given string."""
  cal_ends_with: String

  """All values not ending with the given string."""
  cal_not_ends_with: String
  iodine: String

  """All values that are not equal to given value."""
  iodine_not: String

  """All values that are contained in given list."""
  iodine_in: [String!]

  """All values that are not contained in given list."""
  iodine_not_in: [String!]

  """All values less than the given value."""
  iodine_lt: String

  """All values less than or equal the given value."""
  iodine_lte: String

  """All values greater than the given value."""
  iodine_gt: String

  """All values greater than or equal the given value."""
  iodine_gte: String

  """All values containing the given string."""
  iodine_contains: String

  """All values not containing the given string."""
  iodine_not_contains: String

  """All values starting with the given string."""
  iodine_starts_with: String

  """All values not starting with the given string."""
  iodine_not_starts_with: String

  """All values ending with the given string."""
  iodine_ends_with: String

  """All values not ending with the given string."""
  iodine_not_ends_with: String
  nitrate: String

  """All values that are not equal to given value."""
  nitrate_not: String

  """All values that are contained in given list."""
  nitrate_in: [String!]

  """All values that are not contained in given list."""
  nitrate_not_in: [String!]

  """All values less than the given value."""
  nitrate_lt: String

  """All values less than or equal the given value."""
  nitrate_lte: String

  """All values greater than the given value."""
  nitrate_gt: String

  """All values greater than or equal the given value."""
  nitrate_gte: String

  """All values containing the given string."""
  nitrate_contains: String

  """All values not containing the given string."""
  nitrate_not_contains: String

  """All values starting with the given string."""
  nitrate_starts_with: String

  """All values not starting with the given string."""
  nitrate_not_starts_with: String

  """All values ending with the given string."""
  nitrate_ends_with: String

  """All values not ending with the given string."""
  nitrate_not_ends_with: String
  phosphate: String

  """All values that are not equal to given value."""
  phosphate_not: String

  """All values that are contained in given list."""
  phosphate_in: [String!]

  """All values that are not contained in given list."""
  phosphate_not_in: [String!]

  """All values less than the given value."""
  phosphate_lt: String

  """All values less than or equal the given value."""
  phosphate_lte: String

  """All values greater than the given value."""
  phosphate_gt: String

  """All values greater than or equal the given value."""
  phosphate_gte: String

  """All values containing the given string."""
  phosphate_contains: String

  """All values not containing the given string."""
  phosphate_not_contains: String

  """All values starting with the given string."""
  phosphate_starts_with: String

  """All values not starting with the given string."""
  phosphate_not_starts_with: String

  """All values ending with the given string."""
  phosphate_ends_with: String

  """All values not ending with the given string."""
  phosphate_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  tank: TankWhereInput
}

input WaterParametersWhereUniqueInput {
  id: ID
}
